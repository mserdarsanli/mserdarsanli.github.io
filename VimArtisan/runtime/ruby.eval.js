(function() {
var res = {};
res['lang-syntax'] = (function() {
var res = {};
res['lang'] = 'Rules for Lang: ruby';
res['syntax-groups'] = {};
res['syntax-groups']['SpecialKey'] = SyntaxGroup.FromColor('SpecialKey', new TermColor(4), new TermColor(-1));
res['syntax-groups']['NonText'] = SyntaxGroup.FromColor('NonText', new TermColor(12), new TermColor(-1));
res['syntax-groups']['Directory'] = SyntaxGroup.FromColor('Directory', new TermColor(4), new TermColor(-1));
res['syntax-groups']['IncSearch'] = SyntaxGroup.FromColor('IncSearch', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ModeMsg'] = SyntaxGroup.FromColor('ModeMsg', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['LineNr'] = SyntaxGroup.FromColor('LineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['CursorLineNr'] = SyntaxGroup.FromColor('CursorLineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['StatusLineNC'] = SyntaxGroup.FromColor('StatusLineNC', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['VertSplit'] = SyntaxGroup.FromColor('VertSplit', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['Title'] = SyntaxGroup.FromColor('Title', new TermColor(5), new TermColor(-1));
res['syntax-groups']['VisualNOS'] = SyntaxGroup.FromColor('VisualNOS', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['WildMenu'] = SyntaxGroup.FromColor('WildMenu', new TermColor(0), new TermColor(11));
res['syntax-groups']['Folded'] = SyntaxGroup.FromColor('Folded', new TermColor(4), new TermColor(248));
res['syntax-groups']['FoldColumn'] = SyntaxGroup.FromColor('FoldColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['DiffAdd'] = SyntaxGroup.FromColor('DiffAdd', new TermColor(-1), new TermColor(81));
res['syntax-groups']['DiffChange'] = SyntaxGroup.FromColor('DiffChange', new TermColor(-1), new TermColor(225));
res['syntax-groups']['DiffDelete'] = SyntaxGroup.FromColor('DiffDelete', new TermColor(12), new TermColor(159));
res['syntax-groups']['DiffText'] = SyntaxGroup.FromColor('DiffText', new TermColor(-1), new TermColor(9));
res['syntax-groups']['SignColumn'] = SyntaxGroup.FromColor('SignColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['Conceal'] = SyntaxGroup.FromColor('Conceal', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['SpellBad'] = SyntaxGroup.FromColor('SpellBad', new TermColor(-1), new TermColor(224));
res['syntax-groups']['SpellCap'] = SyntaxGroup.FromColor('SpellCap', new TermColor(-1), new TermColor(81));
res['syntax-groups']['SpellRare'] = SyntaxGroup.FromColor('SpellRare', new TermColor(-1), new TermColor(225));
res['syntax-groups']['SpellLocal'] = SyntaxGroup.FromColor('SpellLocal', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Pmenu'] = SyntaxGroup.FromColor('Pmenu', new TermColor(0), new TermColor(225));
res['syntax-groups']['PmenuSel'] = SyntaxGroup.FromColor('PmenuSel', new TermColor(0), new TermColor(7));
res['syntax-groups']['PmenuSbar'] = SyntaxGroup.FromColor('PmenuSbar', new TermColor(-1), new TermColor(248));
res['syntax-groups']['PmenuThumb'] = SyntaxGroup.FromColor('PmenuThumb', new TermColor(-1), new TermColor(0));
res['syntax-groups']['TabLine'] = SyntaxGroup.FromColor('TabLine', new TermColor(0), new TermColor(7));
res['syntax-groups']['TabLineSel'] = SyntaxGroup.FromColor('TabLineSel', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['TabLineFill'] = SyntaxGroup.FromColor('TabLineFill', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['CursorColumn'] = SyntaxGroup.FromColor('CursorColumn', new TermColor(-1), new TermColor(7));
res['syntax-groups']['CursorLine'] = SyntaxGroup.FromColor('CursorLine', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ColorColumn'] = SyntaxGroup.FromColor('ColorColumn', new TermColor(-1), new TermColor(224));
res['syntax-groups']['MatchParen'] = SyntaxGroup.FromColor('MatchParen', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Underlined'] = SyntaxGroup.FromColor('Underlined', new TermColor(5), new TermColor(-1));
res['syntax-groups']['Ignore'] = SyntaxGroup.FromColor('Ignore', new TermColor(15), new TermColor(-1));
res['syntax-groups']['rubyConditional'] = SyntaxGroup.FromLink('rubyConditional', 'Conditional');
res['syntax-groups']['rubyExceptional'] = SyntaxGroup.FromLink('rubyExceptional', 'rubyConditional');
res['syntax-groups']['rubyMethodExceptional'] = SyntaxGroup.FromLink('rubyMethodExceptional', 'rubyDefine');
res['syntax-groups']['rubyTodo'] = SyntaxGroup.FromLink('rubyTodo', 'Todo');
res['syntax-groups']['rubyStringEscape'] = SyntaxGroup.FromLink('rubyStringEscape', 'Special');
res['syntax-groups']['rubyQuoteEscape'] = SyntaxGroup.FromLink('rubyQuoteEscape', 'rubyStringEscape');
res['syntax-groups']['rubyInterpolationDelimiter'] = SyntaxGroup.FromLink('rubyInterpolationDelimiter', 'Delimiter');
res['syntax-groups']['rubyInterpolation'] = SyntaxGroup.FromColor('rubyInterpolation', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyInstanceVariable'] = SyntaxGroup.FromLink('rubyInstanceVariable', 'rubyIdentifier');
res['syntax-groups']['rubyClassVariable'] = SyntaxGroup.FromLink('rubyClassVariable', 'rubyIdentifier');
res['syntax-groups']['rubyGlobalVariable'] = SyntaxGroup.FromLink('rubyGlobalVariable', 'rubyIdentifier');
res['syntax-groups']['rubyPredefinedVariable'] = SyntaxGroup.FromLink('rubyPredefinedVariable', 'rubyPredefinedIdentifier');
res['syntax-groups']['rubyInvalidVariable'] = SyntaxGroup.FromLink('rubyInvalidVariable', 'Error');
res['syntax-groups']['rubyNoInterpolation'] = SyntaxGroup.FromLink('rubyNoInterpolation', 'rubyString');
res['syntax-groups']['NONE'] = SyntaxGroup.FromColor('NONE', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyDelimEscape'] = SyntaxGroup.FromColor('rubyDelimEscape', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyString'] = SyntaxGroup.FromLink('rubyString', 'String');
res['syntax-groups']['rubyNestedParentheses'] = SyntaxGroup.FromColor('rubyNestedParentheses', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyNestedCurlyBraces'] = SyntaxGroup.FromColor('rubyNestedCurlyBraces', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyNestedAngleBrackets'] = SyntaxGroup.FromColor('rubyNestedAngleBrackets', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyNestedSquareBrackets'] = SyntaxGroup.FromColor('rubyNestedSquareBrackets', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyRegexpSpecial'] = SyntaxGroup.FromLink('rubyRegexpSpecial', 'Special');
res['syntax-groups']['rubyRegexpComment'] = SyntaxGroup.FromLink('rubyRegexpComment', 'Comment');
res['syntax-groups']['rubyRegexpParens'] = SyntaxGroup.FromColor('rubyRegexpParens', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyRegexpCharClass'] = SyntaxGroup.FromLink('rubyRegexpCharClass', 'rubyRegexpSpecial');
res['syntax-groups']['rubyRegexpEscape'] = SyntaxGroup.FromLink('rubyRegexpEscape', 'rubyRegexpSpecial');
res['syntax-groups']['rubyRegexpBrackets'] = SyntaxGroup.FromColor('rubyRegexpBrackets', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyRegexpQuantifier'] = SyntaxGroup.FromLink('rubyRegexpQuantifier', 'rubyRegexpSpecial');
res['syntax-groups']['rubyRegexpAnchor'] = SyntaxGroup.FromLink('rubyRegexpAnchor', 'rubyRegexpSpecial');
res['syntax-groups']['rubyRegexpDot'] = SyntaxGroup.FromLink('rubyRegexpDot', 'rubyRegexpCharClass');
res['syntax-groups']['rubyASCIICode'] = SyntaxGroup.FromLink('rubyASCIICode', 'Character');
res['syntax-groups']['rubyInteger'] = SyntaxGroup.FromLink('rubyInteger', 'Number');
res['syntax-groups']['rubyFloat'] = SyntaxGroup.FromLink('rubyFloat', 'Float');
res['syntax-groups']['rubyLocalVariableOrMethod'] = SyntaxGroup.FromColor('rubyLocalVariableOrMethod', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyBlockArgument'] = SyntaxGroup.FromColor('rubyBlockArgument', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyConstant'] = SyntaxGroup.FromLink('rubyConstant', 'Type');
res['syntax-groups']['rubySymbol'] = SyntaxGroup.FromLink('rubySymbol', 'Constant');
res['syntax-groups']['rubyBlockParameter'] = SyntaxGroup.FromLink('rubyBlockParameter', 'rubyIdentifier');
res['syntax-groups']['rubyBlockParameterList'] = SyntaxGroup.FromColor('rubyBlockParameterList', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyPredefinedConstant'] = SyntaxGroup.FromLink('rubyPredefinedConstant', 'rubyPredefinedIdentifier');
res['syntax-groups']['rubyRegexpDelimiter'] = SyntaxGroup.FromLink('rubyRegexpDelimiter', 'rubyStringDelimiter');
res['syntax-groups']['rubyRegexp'] = SyntaxGroup.FromLink('rubyRegexp', 'rubyString');
res['syntax-groups']['rubyStringDelimiter'] = SyntaxGroup.FromLink('rubyStringDelimiter', 'Delimiter');
res['syntax-groups']['rubySymbolDelimiter'] = SyntaxGroup.FromLink('rubySymbolDelimiter', 'rubyStringDelimiter');
res['syntax-groups']['rubyHeredocStart'] = SyntaxGroup.FromColor('rubyHeredocStart', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyHeredoc'] = SyntaxGroup.FromLink('rubyHeredoc', 'rubyString');
res['syntax-groups']['rubyAliasDeclaration2'] = SyntaxGroup.FromColor('rubyAliasDeclaration2', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyAliasDeclaration'] = SyntaxGroup.FromColor('rubyAliasDeclaration', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyBoolean'] = SyntaxGroup.FromLink('rubyBoolean', 'Boolean');
res['syntax-groups']['rubyPseudoVariable'] = SyntaxGroup.FromLink('rubyPseudoVariable', 'Constant');
res['syntax-groups']['rubyMethodDeclaration'] = SyntaxGroup.FromColor('rubyMethodDeclaration', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyOperator'] = SyntaxGroup.FromLink('rubyOperator', 'Operator');
res['syntax-groups']['rubyClassDeclaration'] = SyntaxGroup.FromColor('rubyClassDeclaration', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyModuleDeclaration'] = SyntaxGroup.FromColor('rubyModuleDeclaration', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyFunction'] = SyntaxGroup.FromLink('rubyFunction', 'Function');
res['syntax-groups']['rubyControl'] = SyntaxGroup.FromLink('rubyControl', 'Statement');
res['syntax-groups']['rubyKeyword'] = SyntaxGroup.FromLink('rubyKeyword', 'Keyword');
res['syntax-groups']['rubyBeginEnd'] = SyntaxGroup.FromLink('rubyBeginEnd', 'Statement');
res['syntax-groups']['rubyDefine'] = SyntaxGroup.FromLink('rubyDefine', 'Define');
res['syntax-groups']['rubyClass'] = SyntaxGroup.FromLink('rubyClass', 'rubyDefine');
res['syntax-groups']['rubyModule'] = SyntaxGroup.FromLink('rubyModule', 'rubyDefine');
res['syntax-groups']['rubyMethodBlock'] = SyntaxGroup.FromColor('rubyMethodBlock', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyBlock'] = SyntaxGroup.FromColor('rubyBlock', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyConditionalModifier'] = SyntaxGroup.FromLink('rubyConditionalModifier', 'rubyConditional');
res['syntax-groups']['rubyRepeatModifier'] = SyntaxGroup.FromLink('rubyRepeatModifier', 'rubyRepeat');
res['syntax-groups']['rubyDoBlock'] = SyntaxGroup.FromColor('rubyDoBlock', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyCurlyBlockDelimiter'] = SyntaxGroup.FromColor('rubyCurlyBlockDelimiter', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyCurlyBlock'] = SyntaxGroup.FromColor('rubyCurlyBlock', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyArrayDelimiter'] = SyntaxGroup.FromColor('rubyArrayDelimiter', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyArrayLiteral'] = SyntaxGroup.FromColor('rubyArrayLiteral', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyBlockExpression'] = SyntaxGroup.FromColor('rubyBlockExpression', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyCaseExpression'] = SyntaxGroup.FromColor('rubyCaseExpression', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyConditionalExpression'] = SyntaxGroup.FromColor('rubyConditionalExpression', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyRepeat'] = SyntaxGroup.FromLink('rubyRepeat', 'Repeat');
res['syntax-groups']['rubyOptionalDo'] = SyntaxGroup.FromLink('rubyOptionalDo', 'rubyRepeat');
res['syntax-groups']['rubyOptionalDoLine'] = SyntaxGroup.FromColor('rubyOptionalDoLine', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyRepeatExpression'] = SyntaxGroup.FromColor('rubyRepeatExpression', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyAccess'] = SyntaxGroup.FromLink('rubyAccess', 'Statement');
res['syntax-groups']['rubyAttribute'] = SyntaxGroup.FromLink('rubyAttribute', 'Statement');
res['syntax-groups']['rubyEval'] = SyntaxGroup.FromLink('rubyEval', 'Statement');
res['syntax-groups']['rubyException'] = SyntaxGroup.FromLink('rubyException', 'Exception');
res['syntax-groups']['rubyInclude'] = SyntaxGroup.FromLink('rubyInclude', 'Include');
res['syntax-groups']['rubySharpBang'] = SyntaxGroup.FromLink('rubySharpBang', 'PreProc');
res['syntax-groups']['rubySpaceError'] = SyntaxGroup.FromLink('rubySpaceError', 'rubyError');
res['syntax-groups']['rubyComment'] = SyntaxGroup.FromLink('rubyComment', 'Comment');
res['syntax-groups']['rubyMultilineComment'] = SyntaxGroup.FromColor('rubyMultilineComment', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyDocumentation'] = SyntaxGroup.FromLink('rubyDocumentation', 'Comment');
res['syntax-groups']['rubyKeywordAsMethod'] = SyntaxGroup.FromColor('rubyKeywordAsMethod', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['rubyDataDirective'] = SyntaxGroup.FromLink('rubyDataDirective', 'Delimiter');
res['syntax-groups']['rubyData'] = SyntaxGroup.FromLink('rubyData', 'Comment');
res['syntax-groups']['rubyIdentifier'] = SyntaxGroup.FromLink('rubyIdentifier', 'Identifier');
res['syntax-groups']['rubyPredefinedIdentifier'] = SyntaxGroup.FromLink('rubyPredefinedIdentifier', 'rubyIdentifier');
res['syntax-groups']['rubyError'] = SyntaxGroup.FromLink('rubyError', 'Error');
return res;
} ())
;
res['snippets'] = [];
res['snippets'].push({
  'title': 'Find Missing Perm',
  'terminal-contents': '<v-normal>given = </v-normal><vruby-string-delimiter>%w{</vruby-string-delimiter><v-normal>                                                                     </v-normal>\n<vruby-string>  ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA</vruby-string><v-normal>                   </v-normal>\n<vruby-string>  CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB</vruby-string><v-normal>                        </v-normal>\n<vruby-string-delimiter>}</vruby-string-delimiter><v-normal>                                                                               </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>all = given[</v-normal><vruby-integer>0</vruby-integer><v-normal>].chars.permutation.collect(&amp;</v-normal><vruby-symbol>:join</vruby-symbol><v-normal>)                                </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>puts </v-normal><vruby-string-delimiter>&quot;</vruby-string-delimiter><vruby-string>missing: </vruby-string><vruby-interpolation-delimiter>#{</vruby-interpolation-delimiter><vruby-interpolation>all - given</vruby-interpolation><vruby-interpolation-delimiter>}</vruby-interpolation-delimiter><vruby-string-delimiter>&quot;</vruby-string-delimiter><v-normal>                                                  </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
res['snippets'].push({
  'title': 'File Input/Output',
  'terminal-contents': '<v-normal>str = </v-normal><vruby-constant>File</vruby-constant><v-normal>.open(</v-normal><vruby-string-delimiter>&apos;</vruby-string-delimiter><vruby-string>input.txt</vruby-string><vruby-string-delimiter>&apos;</vruby-string-delimiter><v-normal>, </v-normal><vruby-string-delimiter>&apos;</vruby-string-delimiter><vruby-string>rb</vruby-string><vruby-string-delimiter>&apos;</vruby-string-delimiter><v-normal>) </v-normal><vruby-curly-block-delimiter>{</vruby-curly-block-delimiter><vruby-block-parameter-list>|</vruby-block-parameter-list><vruby-block-parameter>f</vruby-block-parameter><vruby-block-parameter-list>|</vruby-block-parameter-list><vruby-curly-block> f.read</vruby-curly-block><vruby-curly-block-delimiter>}</vruby-curly-block-delimiter><v-normal>                                 </v-normal>\n<vruby-constant>File</vruby-constant><v-normal>.open(</v-normal><vruby-string-delimiter>&apos;</vruby-string-delimiter><vruby-string>output.txt</vruby-string><vruby-string-delimiter>&apos;</vruby-string-delimiter><v-normal>, </v-normal><vruby-string-delimiter>&apos;</vruby-string-delimiter><vruby-string>wb</vruby-string><vruby-string-delimiter>&apos;</vruby-string-delimiter><v-normal>) </v-normal><vruby-curly-block-delimiter>{</vruby-curly-block-delimiter><vruby-block-parameter-list>|</vruby-block-parameter-list><vruby-block-parameter>f</vruby-block-parameter><vruby-block-parameter-list>|</vruby-block-parameter-list><vruby-curly-block> f.write str</vruby-curly-block><vruby-curly-block-delimiter>}</vruby-curly-block-delimiter><v-normal>                                 </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
return res;
}())