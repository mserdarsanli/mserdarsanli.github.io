(function() {
var res = {};
res['lang-syntax'] = (function() {
var res = {};
res['lang'] = 'Rules for Lang: erlang';
res['syntax-groups'] = {};
res['syntax-groups']['SpecialKey'] = SyntaxGroup.FromColor('SpecialKey', new TermColor(4), new TermColor(-1));
res['syntax-groups']['NonText'] = SyntaxGroup.FromColor('NonText', new TermColor(12), new TermColor(-1));
res['syntax-groups']['Directory'] = SyntaxGroup.FromColor('Directory', new TermColor(4), new TermColor(-1));
res['syntax-groups']['IncSearch'] = SyntaxGroup.FromColor('IncSearch', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ModeMsg'] = SyntaxGroup.FromColor('ModeMsg', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['LineNr'] = SyntaxGroup.FromColor('LineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['CursorLineNr'] = SyntaxGroup.FromColor('CursorLineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['StatusLineNC'] = SyntaxGroup.FromColor('StatusLineNC', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['VertSplit'] = SyntaxGroup.FromColor('VertSplit', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['Title'] = SyntaxGroup.FromColor('Title', new TermColor(5), new TermColor(-1));
res['syntax-groups']['VisualNOS'] = SyntaxGroup.FromColor('VisualNOS', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['WildMenu'] = SyntaxGroup.FromColor('WildMenu', new TermColor(0), new TermColor(11));
res['syntax-groups']['Folded'] = SyntaxGroup.FromColor('Folded', new TermColor(4), new TermColor(248));
res['syntax-groups']['FoldColumn'] = SyntaxGroup.FromColor('FoldColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['DiffAdd'] = SyntaxGroup.FromColor('DiffAdd', new TermColor(-1), new TermColor(81));
res['syntax-groups']['DiffChange'] = SyntaxGroup.FromColor('DiffChange', new TermColor(-1), new TermColor(225));
res['syntax-groups']['DiffDelete'] = SyntaxGroup.FromColor('DiffDelete', new TermColor(12), new TermColor(159));
res['syntax-groups']['DiffText'] = SyntaxGroup.FromColor('DiffText', new TermColor(-1), new TermColor(9));
res['syntax-groups']['SignColumn'] = SyntaxGroup.FromColor('SignColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['Conceal'] = SyntaxGroup.FromColor('Conceal', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['SpellBad'] = SyntaxGroup.FromColor('SpellBad', new TermColor(-1), new TermColor(224));
res['syntax-groups']['SpellCap'] = SyntaxGroup.FromColor('SpellCap', new TermColor(-1), new TermColor(81));
res['syntax-groups']['SpellRare'] = SyntaxGroup.FromColor('SpellRare', new TermColor(-1), new TermColor(225));
res['syntax-groups']['SpellLocal'] = SyntaxGroup.FromColor('SpellLocal', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Pmenu'] = SyntaxGroup.FromColor('Pmenu', new TermColor(0), new TermColor(225));
res['syntax-groups']['PmenuSel'] = SyntaxGroup.FromColor('PmenuSel', new TermColor(0), new TermColor(7));
res['syntax-groups']['PmenuSbar'] = SyntaxGroup.FromColor('PmenuSbar', new TermColor(-1), new TermColor(248));
res['syntax-groups']['PmenuThumb'] = SyntaxGroup.FromColor('PmenuThumb', new TermColor(-1), new TermColor(0));
res['syntax-groups']['TabLine'] = SyntaxGroup.FromColor('TabLine', new TermColor(0), new TermColor(7));
res['syntax-groups']['TabLineSel'] = SyntaxGroup.FromColor('TabLineSel', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['TabLineFill'] = SyntaxGroup.FromColor('TabLineFill', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['CursorColumn'] = SyntaxGroup.FromColor('CursorColumn', new TermColor(-1), new TermColor(7));
res['syntax-groups']['CursorLine'] = SyntaxGroup.FromColor('CursorLine', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ColorColumn'] = SyntaxGroup.FromColor('ColorColumn', new TermColor(-1), new TermColor(224));
res['syntax-groups']['MatchParen'] = SyntaxGroup.FromColor('MatchParen', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Underlined'] = SyntaxGroup.FromColor('Underlined', new TermColor(5), new TermColor(-1));
res['syntax-groups']['Ignore'] = SyntaxGroup.FromColor('Ignore', new TermColor(15), new TermColor(-1));
res['syntax-groups']['erlangCommentAnnotation'] = SyntaxGroup.FromLink('erlangCommentAnnotation', 'Special');
res['syntax-groups']['erlangTodo'] = SyntaxGroup.FromLink('erlangTodo', 'Todo');
res['syntax-groups']['erlangComment'] = SyntaxGroup.FromLink('erlangComment', 'Comment');
res['syntax-groups']['erlangShebang'] = SyntaxGroup.FromLink('erlangShebang', 'Comment');
res['syntax-groups']['erlangNumberInteger'] = SyntaxGroup.FromLink('erlangNumberInteger', 'Number');
res['syntax-groups']['erlangNumberFloat'] = SyntaxGroup.FromLink('erlangNumberFloat', 'Float');
res['syntax-groups']['erlangStringModifier'] = SyntaxGroup.FromLink('erlangStringModifier', 'Special');
res['syntax-groups']['erlangString'] = SyntaxGroup.FromLink('erlangString', 'String');
res['syntax-groups']['erlangQuotedAtomModifier'] = SyntaxGroup.FromLink('erlangQuotedAtomModifier', 'Special');
res['syntax-groups']['erlangQuotedAtom'] = SyntaxGroup.FromLink('erlangQuotedAtom', 'String');
res['syntax-groups']['erlangModifier'] = SyntaxGroup.FromLink('erlangModifier', 'Special');
res['syntax-groups']['erlangOperator'] = SyntaxGroup.FromLink('erlangOperator', 'Operator');
res['syntax-groups']['erlangBracket'] = SyntaxGroup.FromLink('erlangBracket', 'Delimiter');
res['syntax-groups']['erlangPipe'] = SyntaxGroup.FromLink('erlangPipe', 'Delimiter');
res['syntax-groups']['erlangRightArrow'] = SyntaxGroup.FromLink('erlangRightArrow', 'Operator');
res['syntax-groups']['erlangBoolean'] = SyntaxGroup.FromLink('erlangBoolean', 'Boolean');
res['syntax-groups']['erlangAtom'] = SyntaxGroup.FromLink('erlangAtom', 'String');
res['syntax-groups']['erlangBIF'] = SyntaxGroup.FromLink('erlangBIF', 'Function');
res['syntax-groups']['erlangLocalFuncCall'] = SyntaxGroup.FromLink('erlangLocalFuncCall', 'Normal');
res['syntax-groups']['erlangLocalFuncRef'] = SyntaxGroup.FromLink('erlangLocalFuncRef', 'Normal');
res['syntax-groups']['erlangGlobalFuncCall'] = SyntaxGroup.FromLink('erlangGlobalFuncCall', 'Normal');
res['syntax-groups']['erlangGlobalFuncRef'] = SyntaxGroup.FromLink('erlangGlobalFuncRef', 'Normal');
res['syntax-groups']['erlangVariable'] = SyntaxGroup.FromLink('erlangVariable', 'Identifier');
res['syntax-groups']['erlangMacro'] = SyntaxGroup.FromLink('erlangMacro', 'Macro');
res['syntax-groups']['erlangRecord'] = SyntaxGroup.FromLink('erlangRecord', 'Structure');
res['syntax-groups']['erlangBitType'] = SyntaxGroup.FromLink('erlangBitType', 'Type');
res['syntax-groups']['erlangUnknownAttribute'] = SyntaxGroup.FromLink('erlangUnknownAttribute', 'Normal');
res['syntax-groups']['erlangAttribute'] = SyntaxGroup.FromLink('erlangAttribute', 'Keyword');
res['syntax-groups']['erlangInclude'] = SyntaxGroup.FromLink('erlangInclude', 'Include');
res['syntax-groups']['erlangRecordDef'] = SyntaxGroup.FromLink('erlangRecordDef', 'Keyword');
res['syntax-groups']['erlangDefine'] = SyntaxGroup.FromLink('erlangDefine', 'Define');
res['syntax-groups']['erlangPreCondit'] = SyntaxGroup.FromLink('erlangPreCondit', 'PreCondit');
res['syntax-groups']['erlangType'] = SyntaxGroup.FromLink('erlangType', 'Type');
res['syntax-groups']['erlangKeyword'] = SyntaxGroup.FromLink('erlangKeyword', 'Keyword');
res['syntax-groups']['erlangSync'] = SyntaxGroup.FromColor('erlangSync', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['erlangMacroDef'] = SyntaxGroup.FromLink('erlangMacroDef', 'Macro');
res['syntax-groups']['erlangExtra'] = SyntaxGroup.FromLink('erlangExtra', 'Statement');
res['syntax-groups']['erlangSignal'] = SyntaxGroup.FromLink('erlangSignal', 'Statement');
return res;
} ())
;
res['snippets'] = [];
res['snippets'].push({
  'title': 'Find Missing Perm',
  'terminal-contents': '<verlang-attribute>-module</verlang-attribute><v-normal>( </v-normal><verlang-atom>find_missing_permutation</verlang-atom><v-normal> ).                                            </v-normal>\n<v-normal>                                                                                </v-normal>\n<verlang-attribute>-export</verlang-attribute><v-normal>( </v-normal><verlang-bracket>[</verlang-bracket><verlang-local-func-ref>difference</verlang-local-func-ref><verlang-operator>/</verlang-operator><verlang-number-integer>2</verlang-number-integer><v-normal>, </v-normal><verlang-local-func-ref>task</verlang-local-func-ref><verlang-operator>/</verlang-operator><verlang-number-integer>0</verlang-number-integer><verlang-bracket>]</verlang-bracket><v-normal> ).                                              </v-normal>\n<v-normal>                                                                                </v-normal>\n<verlang-local-func-call>difference</verlang-local-func-call><v-normal>( </v-normal><verlang-variable>Permutate_this</verlang-variable><v-normal>, </v-normal><verlang-variable>Existing_permutations</verlang-variable><v-normal> ) </v-normal><verlang-right-arrow>-&gt;</verlang-right-arrow><v-normal> </v-normal><verlang-local-func-call>all_permutations</verlang-local-func-call><v-normal>( </v-normal><verlang-variable>Permuta</verlang-variable>\n<verlang-variable>te_this</verlang-variable><v-normal> ) </v-normal><verlang-operator>--</verlang-operator><v-normal> </v-normal><verlang-variable>Existing_permutations</verlang-variable><v-normal>.                                             </v-normal>\n<v-normal>                                                                                </v-normal>\n<verlang-local-func-call>task</verlang-local-func-call><v-normal>() </v-normal><verlang-right-arrow>-&gt;</verlang-right-arrow><v-normal> </v-normal><verlang-local-func-call>difference</verlang-local-func-call><v-normal>( </v-normal><verlang-string>&quot;ABCD&quot;</verlang-string><v-normal>, </v-normal><verlang-local-func-call>existing_permutations</verlang-local-func-call><v-normal>() ).                        </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>                                                                                </v-normal>\n<verlang-local-func-call>all_permutations</verlang-local-func-call><v-normal>( </v-normal><verlang-variable>String</verlang-variable><v-normal> ) </v-normal><verlang-right-arrow>-&gt;</verlang-right-arrow><v-normal> </v-normal><verlang-bracket>[[</verlang-bracket><verlang-variable>A</verlang-variable><v-normal>, </v-normal><verlang-variable>B</verlang-variable><v-normal>, </v-normal><verlang-variable>C</verlang-variable><v-normal>, </v-normal><verlang-variable>D</verlang-variable><verlang-bracket>]</verlang-bracket><v-normal> </v-normal><verlang-pipe>||</verlang-pipe><v-normal> </v-normal><verlang-variable>A</verlang-variable><v-normal> </v-normal><verlang-operator>&lt;-</verlang-operator><v-normal> </v-normal><verlang-variable>String</verlang-variable><v-normal>, </v-normal><verlang-variable>B</verlang-variable><v-normal> </v-normal><verlang-operator>&lt;-</verlang-operator><v-normal> </v-normal><verlang-variable>String</verlang-variable><v-normal>, </v-normal><verlang-variable>C</verlang-variable><v-normal> </v-normal><verlang-operator>&lt;-</verlang-operator><v-normal> </v-normal><verlang-variable>St</verlang-variable>\n<verlang-variable>ring</verlang-variable><v-normal>, </v-normal><verlang-variable>D</verlang-variable><v-normal> </v-normal><verlang-operator>&lt;-</verlang-operator><v-normal> </v-normal><verlang-variable>String</verlang-variable><v-normal>, </v-normal><verlang-local-func-call>is_different</verlang-local-func-call><v-normal>(</v-normal><verlang-bracket>[</verlang-bracket><verlang-variable>A</verlang-variable><v-normal>, </v-normal><verlang-variable>B</verlang-variable><v-normal>, </v-normal><verlang-variable>C</verlang-variable><v-normal>, </v-normal><verlang-variable>D</verlang-variable><verlang-bracket>]</verlang-bracket><v-normal>)</v-normal><verlang-bracket>]</verlang-bracket><v-normal>.                                 </v-normal>\n<v-normal>                                                                                </v-normal>\n<verlang-local-func-call>existing_permutations</verlang-local-func-call><v-normal>() </v-normal><verlang-right-arrow>-&gt;</verlang-right-arrow><v-normal> </v-normal><verlang-bracket>[</verlang-bracket><verlang-string>&quot;ABCD&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;CABD&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;ACDB&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;DACB&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;BCDA&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;ACBD&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;ADC</verlang-string>\n<verlang-string>B&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;CDAB&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;DABC&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;BCAD&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;CADB&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;CDBA&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;CBAD&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;ABDC&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;ADBC&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;BDCA&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;DCB</verlang-string>\n<verlang-string>A&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;BACD&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;BADC&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;BDAC&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;CBDA&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;DBCA&quot;</verlang-string><v-normal>, </v-normal><verlang-string>&quot;DCAB&quot;</verlang-string><verlang-bracket>]</verlang-bracket><v-normal>.                            </v-normal>\n<v-normal>                                                                                </v-normal>\n<verlang-local-func-call>is_different</verlang-local-func-call><v-normal>( </v-normal><verlang-bracket>[</verlang-bracket><verlang-variable>_H</verlang-variable><verlang-bracket>]</verlang-bracket><v-normal> ) </v-normal><verlang-right-arrow>-&gt;</verlang-right-arrow><v>0</v><verlang-boolean>true</verlang-boolean><v>ue</v><v-normal>;                                                 </v-normal>\n<verlang-local-func-call>is_different</verlang-local-func-call><v-normal>( </v-normal><verlang-bracket>[</verlang-bracket><verlang-variable>H</verlang-variable><v-normal> </v-normal><verlang-pipe>|</verlang-pipe><v-normal> </v-normal><verlang-variable>T</verlang-variable><verlang-bracket>]</verlang-bracket><v-normal> ) </v-normal><verlang-right-arrow>-&gt;</verlang-right-arrow><v-normal> </v-normal><verlang-operator>not</verlang-operator><v-normal> </v-normal><verlang-global-func-call>lists:member</verlang-global-func-call><v-normal>(</v-normal><verlang-variable>H</verlang-variable><v-normal>, </v-normal><verlang-variable>T</verlang-variable><v-normal>) </v-normal><verlang-operator>andalso</verlang-operator><v-normal> </v-normal><verlang-local-func-call>is_different</verlang-local-func-call><v-normal>( </v-normal><verlang-variable>T</verlang-variable><v-normal> ).    </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
res['snippets'].push({
  'title': 'File Input/Output',
  'terminal-contents': '<verlang-attribute>-module</verlang-attribute><v-normal>( </v-normal><verlang-atom>file_io</verlang-atom><v-normal> ).                                                             </v-normal>\n<v-normal>                                                                                </v-normal>\n<verlang-attribute>-export</verlang-attribute><v-normal>( </v-normal><verlang-bracket>[</verlang-bracket><verlang-local-func-ref>task</verlang-local-func-ref><verlang-operator>/</verlang-operator><verlang-number-integer>0</verlang-number-integer><verlang-bracket>]</verlang-bracket><v-normal> ).                                                            </v-normal>\n<v-normal>                                                                                </v-normal>\n<verlang-local-func-call>task</verlang-local-func-call><v-normal>() </v-normal><verlang-right-arrow>-&gt;</verlang-right-arrow><v-normal>                                                                       </v-normal>\n<v-normal>       </v-normal><verlang-bracket>{</verlang-bracket><verlang-atom>ok</verlang-atom><v-normal>, </v-normal><verlang-variable>Contents</verlang-variable><verlang-bracket>}</verlang-bracket><v-normal> </v-normal><verlang-operator>=</verlang-operator><v-normal> </v-normal><verlang-global-func-call>file:read_file</verlang-global-func-call><v-normal>( </v-normal><verlang-string>&quot;input.txt&quot;</verlang-string><v-normal> ),                          </v-normal>\n<v-normal>       </v-normal><verlang-atom>ok</verlang-atom><v-normal> </v-normal><verlang-operator>=</verlang-operator><v-normal> </v-normal><verlang-global-func-call>file:write_file</verlang-global-func-call><v-normal>( </v-normal><verlang-string>&quot;output.txt&quot;</verlang-string><v-normal>, </v-normal><verlang-variable>Contents</verlang-variable><v-normal> ).                          </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
return res;
}())