(function() {
var res = {};
res['lang-syntax'] = (function() {
var res = {};
res['lang'] = 'Rules for Lang: perl6';
res['syntax-groups'] = {};
res['syntax-groups']['SpecialKey'] = SyntaxGroup.FromColor('SpecialKey', new TermColor(4), new TermColor(-1));
res['syntax-groups']['NonText'] = SyntaxGroup.FromColor('NonText', new TermColor(12), new TermColor(-1));
res['syntax-groups']['Directory'] = SyntaxGroup.FromColor('Directory', new TermColor(4), new TermColor(-1));
res['syntax-groups']['IncSearch'] = SyntaxGroup.FromColor('IncSearch', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ModeMsg'] = SyntaxGroup.FromColor('ModeMsg', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['LineNr'] = SyntaxGroup.FromColor('LineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['CursorLineNr'] = SyntaxGroup.FromColor('CursorLineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['StatusLineNC'] = SyntaxGroup.FromColor('StatusLineNC', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['VertSplit'] = SyntaxGroup.FromColor('VertSplit', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['Title'] = SyntaxGroup.FromColor('Title', new TermColor(5), new TermColor(-1));
res['syntax-groups']['VisualNOS'] = SyntaxGroup.FromColor('VisualNOS', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['WildMenu'] = SyntaxGroup.FromColor('WildMenu', new TermColor(0), new TermColor(11));
res['syntax-groups']['Folded'] = SyntaxGroup.FromColor('Folded', new TermColor(4), new TermColor(248));
res['syntax-groups']['FoldColumn'] = SyntaxGroup.FromColor('FoldColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['DiffAdd'] = SyntaxGroup.FromColor('DiffAdd', new TermColor(-1), new TermColor(81));
res['syntax-groups']['DiffChange'] = SyntaxGroup.FromColor('DiffChange', new TermColor(-1), new TermColor(225));
res['syntax-groups']['DiffDelete'] = SyntaxGroup.FromColor('DiffDelete', new TermColor(12), new TermColor(159));
res['syntax-groups']['DiffText'] = SyntaxGroup.FromColor('DiffText', new TermColor(-1), new TermColor(9));
res['syntax-groups']['SignColumn'] = SyntaxGroup.FromColor('SignColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['Conceal'] = SyntaxGroup.FromColor('Conceal', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['SpellBad'] = SyntaxGroup.FromColor('SpellBad', new TermColor(-1), new TermColor(224));
res['syntax-groups']['SpellCap'] = SyntaxGroup.FromColor('SpellCap', new TermColor(-1), new TermColor(81));
res['syntax-groups']['SpellRare'] = SyntaxGroup.FromColor('SpellRare', new TermColor(-1), new TermColor(225));
res['syntax-groups']['SpellLocal'] = SyntaxGroup.FromColor('SpellLocal', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Pmenu'] = SyntaxGroup.FromColor('Pmenu', new TermColor(0), new TermColor(225));
res['syntax-groups']['PmenuSel'] = SyntaxGroup.FromColor('PmenuSel', new TermColor(0), new TermColor(7));
res['syntax-groups']['PmenuSbar'] = SyntaxGroup.FromColor('PmenuSbar', new TermColor(-1), new TermColor(248));
res['syntax-groups']['PmenuThumb'] = SyntaxGroup.FromColor('PmenuThumb', new TermColor(-1), new TermColor(0));
res['syntax-groups']['TabLine'] = SyntaxGroup.FromColor('TabLine', new TermColor(0), new TermColor(7));
res['syntax-groups']['TabLineSel'] = SyntaxGroup.FromColor('TabLineSel', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['TabLineFill'] = SyntaxGroup.FromColor('TabLineFill', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['CursorColumn'] = SyntaxGroup.FromColor('CursorColumn', new TermColor(-1), new TermColor(7));
res['syntax-groups']['CursorLine'] = SyntaxGroup.FromColor('CursorLine', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ColorColumn'] = SyntaxGroup.FromColor('ColorColumn', new TermColor(-1), new TermColor(224));
res['syntax-groups']['MatchParen'] = SyntaxGroup.FromColor('MatchParen', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Underlined'] = SyntaxGroup.FromColor('Underlined', new TermColor(5), new TermColor(-1));
res['syntax-groups']['Ignore'] = SyntaxGroup.FromColor('Ignore', new TermColor(15), new TermColor(-1));
res['syntax-groups']['p6Normal'] = SyntaxGroup.FromLink('p6Normal', 'Normal');
res['syntax-groups']['p6Operator'] = SyntaxGroup.FromLink('p6Operator', 'Operator');
res['syntax-groups']['p6VarStorage'] = SyntaxGroup.FromLink('p6VarStorage', 'Special');
res['syntax-groups']['p6Attention'] = SyntaxGroup.FromLink('p6Attention', 'Todo');
res['syntax-groups']['p6DeclareRoutine'] = SyntaxGroup.FromLink('p6DeclareRoutine', 'Keyword');
res['syntax-groups']['p6Exception'] = SyntaxGroup.FromLink('p6Exception', 'Exception');
res['syntax-groups']['p6Property'] = SyntaxGroup.FromLink('p6Property', 'Tag');
res['syntax-groups']['p6Number'] = SyntaxGroup.FromLink('p6Number', 'Number');
res['syntax-groups']['p6FlowControl'] = SyntaxGroup.FromLink('p6FlowControl', 'Special');
res['syntax-groups']['p6TypeConstraint'] = SyntaxGroup.FromLink('p6TypeConstraint', 'PreCondit');
res['syntax-groups']['p6Type'] = SyntaxGroup.FromLink('p6Type', 'Type');
res['syntax-groups']['p6ClosureTrait'] = SyntaxGroup.FromLink('p6ClosureTrait', 'PreProc');
res['syntax-groups']['p6Pragma'] = SyntaxGroup.FromLink('p6Pragma', 'Keyword');
res['syntax-groups']['p6Module'] = SyntaxGroup.FromLink('p6Module', 'Keyword');
res['syntax-groups']['p6Repeat'] = SyntaxGroup.FromLink('p6Repeat', 'Repeat');
res['syntax-groups']['p6Variable'] = SyntaxGroup.FromLink('p6Variable', 'Identifier');
res['syntax-groups']['p6Conditional'] = SyntaxGroup.FromLink('p6Conditional', 'Conditional');
res['syntax-groups']['p6Include'] = SyntaxGroup.FromLink('p6Include', 'Include');
res['syntax-groups']['p6ReduceOp'] = SyntaxGroup.FromLink('p6ReduceOp', 'p6Operator');
res['syntax-groups']['p6ReverseCrossOp'] = SyntaxGroup.FromLink('p6ReverseCrossOp', 'p6Operator');
res['syntax-groups']['p6Routine'] = SyntaxGroup.FromLink('p6Routine', 'Function');
res['syntax-groups']['p6Shebang'] = SyntaxGroup.FromLink('p6Shebang', 'PreProc');
res['syntax-groups']['p6BlockLabel'] = SyntaxGroup.FromLink('p6BlockLabel', 'Label');
res['syntax-groups']['p6Float'] = SyntaxGroup.FromLink('p6Float', 'Float');
res['syntax-groups']['p6NumberBase'] = SyntaxGroup.FromLink('p6NumberBase', 'Special');
res['syntax-groups']['p6VersionNum'] = SyntaxGroup.FromLink('p6VersionNum', 'Number');
res['syntax-groups']['p6Version'] = SyntaxGroup.FromLink('p6Version', 'Operator');
res['syntax-groups']['p6VersionDot'] = SyntaxGroup.FromLink('p6VersionDot', 'Special');
res['syntax-groups']['p6PackageTwigil'] = SyntaxGroup.FromLink('p6PackageTwigil', 'p6Twigil');
res['syntax-groups']['p6MatchVar'] = SyntaxGroup.FromLink('p6MatchVar', 'Identifier');
res['syntax-groups']['p6MatchVarSigil'] = SyntaxGroup.FromColor('p6MatchVarSigil', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6Twigil'] = SyntaxGroup.FromLink('p6Twigil', 'Special');
res['syntax-groups']['p6Context'] = SyntaxGroup.FromLink('p6Context', 'Operator');
res['syntax-groups']['p6Placeholder'] = SyntaxGroup.FromLink('p6Placeholder', 'Identifier');
res['syntax-groups']['p6InterpScalar'] = SyntaxGroup.FromColor('p6InterpScalar', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6InterpArray'] = SyntaxGroup.FromColor('p6InterpArray', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6InterpHash'] = SyntaxGroup.FromColor('p6InterpHash', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6InterpFunction'] = SyntaxGroup.FromColor('p6InterpFunction', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6InterpClosure'] = SyntaxGroup.FromColor('p6InterpClosure', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6EscQQ'] = SyntaxGroup.FromLink('p6EscQQ', 'p6StringSpecial2');
res['syntax-groups']['p6EscBackSlash'] = SyntaxGroup.FromLink('p6EscBackSlash', 'p6StringSpecial2');
res['syntax-groups']['p6Escape'] = SyntaxGroup.FromLink('p6Escape', 'p6StringSpecial2');
res['syntax-groups']['p6EscOpenCurly'] = SyntaxGroup.FromLink('p6EscOpenCurly', 'p6StringSpecial2');
res['syntax-groups']['p6EscCodePoint'] = SyntaxGroup.FromColor('p6EscCodePoint', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6EscHex'] = SyntaxGroup.FromColor('p6EscHex', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6EscOct'] = SyntaxGroup.FromColor('p6EscOct', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6EscOctOld'] = SyntaxGroup.FromLink('p6EscOctOld', 'p6Error');
res['syntax-groups']['p6EscNull'] = SyntaxGroup.FromLink('p6EscNull', 'p6StringSpecial2');
res['syntax-groups']['p6EscQuote'] = SyntaxGroup.FromLink('p6EscQuote', 'p6StringSpecial2');
res['syntax-groups']['p6EscDoubleQuote'] = SyntaxGroup.FromLink('p6EscDoubleQuote', 'p6StringSpecial2');
res['syntax-groups']['p6EscCloseAngle'] = SyntaxGroup.FromLink('p6EscCloseAngle', 'p6StringSpecial2');
res['syntax-groups']['p6EscCloseFrench'] = SyntaxGroup.FromLink('p6EscCloseFrench', 'p6StringSpecial2');
res['syntax-groups']['p6EscBackTick'] = SyntaxGroup.FromLink('p6EscBackTick', 'p6StringSpecial2');
res['syntax-groups']['p6EscForwardSlash'] = SyntaxGroup.FromLink('p6EscForwardSlash', 'p6StringSpecial2');
res['syntax-groups']['p6EscVerticalBar'] = SyntaxGroup.FromLink('p6EscVerticalBar', 'p6StringSpecial2');
res['syntax-groups']['p6EscExclamation'] = SyntaxGroup.FromLink('p6EscExclamation', 'p6StringSpecial2');
res['syntax-groups']['p6EscComma'] = SyntaxGroup.FromColor('p6EscComma', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6EscDollar'] = SyntaxGroup.FromLink('p6EscDollar', 'p6StringSpecial2');
res['syntax-groups']['p6EscCloseCurly'] = SyntaxGroup.FromLink('p6EscCloseCurly', 'p6StringSpecial2');
res['syntax-groups']['p6EscCloseBracket'] = SyntaxGroup.FromLink('p6EscCloseBracket', 'p6StringSpecial2');
res['syntax-groups']['p6CodePoint'] = SyntaxGroup.FromLink('p6CodePoint', 'p6StringSpecial');
res['syntax-groups']['p6HexSequence'] = SyntaxGroup.FromLink('p6HexSequence', 'p6StringSpecial');
res['syntax-groups']['p6OctSequence'] = SyntaxGroup.FromLink('p6OctSequence', 'p6StringSpecial');
res['syntax-groups']['p6QQSequence'] = SyntaxGroup.FromColor('p6QQSequence', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6EscHash'] = SyntaxGroup.FromLink('p6EscHash', 'p6StringSpecial2');
res['syntax-groups']['p6Adverb'] = SyntaxGroup.FromColor('p6Adverb', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6Quote'] = SyntaxGroup.FromLink('p6Quote', 'Delimiter');
res['syntax-groups']['p6InnerAnglesOne'] = SyntaxGroup.FromColor('p6InnerAnglesOne', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6StringAngle'] = SyntaxGroup.FromLink('p6StringAngle', 'p6String');
res['syntax-groups']['p6InnerAnglesTwo'] = SyntaxGroup.FromColor('p6InnerAnglesTwo', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6Comment'] = SyntaxGroup.FromLink('p6Comment', 'Comment');
res['syntax-groups']['p6StringSQ'] = SyntaxGroup.FromLink('p6StringSQ', 'p6String');
res['syntax-groups']['p6StringDQ'] = SyntaxGroup.FromLink('p6StringDQ', 'p6String');
res['syntax-groups']['p6StringAngles'] = SyntaxGroup.FromLink('p6StringAngles', 'p6String');
res['syntax-groups']['p6InnerFrench'] = SyntaxGroup.FromColor('p6InnerFrench', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6StringFrench'] = SyntaxGroup.FromLink('p6StringFrench', 'p6String');
res['syntax-groups']['p6QPairs'] = SyntaxGroup.FromColor('p6QPairs', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6QuoteQ'] = SyntaxGroup.FromLink('p6QuoteQ', 'p6Operator');
res['syntax-groups']['p6StringQ'] = SyntaxGroup.FromLink('p6StringQ', 'p6String');
res['syntax-groups']['p6StringQ_PIR'] = SyntaxGroup.FromColor('p6StringQ_PIR', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6EscCloseParen'] = SyntaxGroup.FromColor('p6EscCloseParen', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6Key'] = SyntaxGroup.FromLink('p6Key', 'p6String');
res['syntax-groups']['p6StringP5Auto'] = SyntaxGroup.FromLink('p6StringP5Auto', 'p6String');
res['syntax-groups']['p6StringAuto'] = SyntaxGroup.FromLink('p6StringAuto', 'p6String');
res['syntax-groups']['p6HyperOp'] = SyntaxGroup.FromLink('p6HyperOp', 'p6Operator');
res['syntax-groups']['p6RegexBlockCrap'] = SyntaxGroup.FromColor('p6RegexBlockCrap', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RegexName'] = SyntaxGroup.FromColor('p6RegexName', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RegexBlock'] = SyntaxGroup.FromLink('p6RegexBlock', 'p6String');
res['syntax-groups']['p6RxMeta'] = SyntaxGroup.FromLink('p6RxMeta', 'p6StringSpecial');
res['syntax-groups']['p6RxEscape'] = SyntaxGroup.FromLink('p6RxEscape', 'p6StringSpecial2');
res['syntax-groups']['p6RxAnchor'] = SyntaxGroup.FromLink('p6RxAnchor', 'p6StringSpecial');
res['syntax-groups']['p6RxCapture'] = SyntaxGroup.FromLink('p6RxCapture', 'p6StringSpecial2');
res['syntax-groups']['p6RxGroup'] = SyntaxGroup.FromColor('p6RxGroup', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxAlternation'] = SyntaxGroup.FromLink('p6RxAlternation', 'p6StringSpecial2');
res['syntax-groups']['p6RxAdverb'] = SyntaxGroup.FromColor('p6RxAdverb', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxAdverbArg'] = SyntaxGroup.FromColor('p6RxAdverbArg', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxStorage'] = SyntaxGroup.FromColor('p6RxStorage', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxAssertion'] = SyntaxGroup.FromColor('p6RxAssertion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxQuoteWords'] = SyntaxGroup.FromLink('p6RxQuoteWords', 'p6String');
res['syntax-groups']['p6RxClosure'] = SyntaxGroup.FromColor('p6RxClosure', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxStringSQ'] = SyntaxGroup.FromLink('p6RxStringSQ', 'p6String');
res['syntax-groups']['p6RxStringDQ'] = SyntaxGroup.FromLink('p6RxStringDQ', 'p6String');
res['syntax-groups']['p6RxRange'] = SyntaxGroup.FromLink('p6RxRange', 'p6StringSpecial');
res['syntax-groups']['p6StringSpecial2'] = SyntaxGroup.FromLink('p6StringSpecial2', 'Special');
res['syntax-groups']['p6RxCharClass'] = SyntaxGroup.FromLink('p6RxCharClass', 'p6String');
res['syntax-groups']['p6RxAssertCall'] = SyntaxGroup.FromColor('p6RxAssertCall', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxP5Escape'] = SyntaxGroup.FromLink('p6RxP5Escape', 'p6StringSpecial2');
res['syntax-groups']['p6RxP5Oct'] = SyntaxGroup.FromLink('p6RxP5Oct', 'p6StringSpecial2');
res['syntax-groups']['p6RxP5Hex'] = SyntaxGroup.FromLink('p6RxP5Hex', 'p6StringSpecial2');
res['syntax-groups']['p6RxP5EscMeta'] = SyntaxGroup.FromLink('p6RxP5EscMeta', 'p6StringSpecial2');
res['syntax-groups']['p6RxP5CodePoint'] = SyntaxGroup.FromLink('p6RxP5CodePoint', 'p6StringSpecial2');
res['syntax-groups']['p6RxP5Prop'] = SyntaxGroup.FromLink('p6RxP5Prop', 'p6StringSpecial2');
res['syntax-groups']['p6RxP5Quantifier'] = SyntaxGroup.FromLink('p6RxP5Quantifier', 'p6StringSpecial');
res['syntax-groups']['p6RxP5Meta'] = SyntaxGroup.FromLink('p6RxP5Meta', 'p6StringSpecial2');
res['syntax-groups']['p6RxP5QuoteMeta'] = SyntaxGroup.FromLink('p6RxP5QuoteMeta', 'p6String');
res['syntax-groups']['p6RxP5ParenMod'] = SyntaxGroup.FromColor('p6RxP5ParenMod', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxP5Verb'] = SyntaxGroup.FromLink('p6RxP5Verb', 'p6StringSpecial');
res['syntax-groups']['p6RxP5Count'] = SyntaxGroup.FromColor('p6RxP5Count', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxP5Named'] = SyntaxGroup.FromLink('p6RxP5Named', 'p6StringSpecial');
res['syntax-groups']['p6RxP5ReadRef'] = SyntaxGroup.FromLink('p6RxP5ReadRef', 'p6StringSpecial2');
res['syntax-groups']['p6RxP5WriteRef'] = SyntaxGroup.FromLink('p6RxP5WriteRef', 'p6StringSpecial2');
res['syntax-groups']['p6RxP5CharClass'] = SyntaxGroup.FromLink('p6RxP5CharClass', 'p6String');
res['syntax-groups']['p6RxP5Anchor'] = SyntaxGroup.FromLink('p6RxP5Anchor', 'p6StringSpecial');
res['syntax-groups']['p6RxP5Posix'] = SyntaxGroup.FromLink('p6RxP5Posix', 'p6StringSpecial');
res['syntax-groups']['p6RxP5Range'] = SyntaxGroup.FromLink('p6RxP5Range', 'p6StringSpecial');
res['syntax-groups']['p6RxP5CPId'] = SyntaxGroup.FromLink('p6RxP5CPId', 'p6StringSpecial');
res['syntax-groups']['p6RxP5OctSeq'] = SyntaxGroup.FromLink('p6RxP5OctSeq', 'p6StringSpecial');
res['syntax-groups']['p6RxP5HexSeq'] = SyntaxGroup.FromLink('p6RxP5HexSeq', 'p6StringSpecial');
res['syntax-groups']['p6RxP5ReadRefId'] = SyntaxGroup.FromLink('p6RxP5ReadRefId', 'Identifier');
res['syntax-groups']['p6RxP5WriteRefId'] = SyntaxGroup.FromLink('p6RxP5WriteRefId', 'p6StringSpecial');
res['syntax-groups']['p6RxP5PropId'] = SyntaxGroup.FromLink('p6RxP5PropId', 'p6StringSpecial');
res['syntax-groups']['p6RxP5Mod'] = SyntaxGroup.FromLink('p6RxP5Mod', 'p6StringSpecial');
res['syntax-groups']['p6RxP5ModName'] = SyntaxGroup.FromLink('p6RxP5ModName', 'Identifier');
res['syntax-groups']['p6RxP5Code'] = SyntaxGroup.FromColor('p6RxP5Code', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxP5ModDef'] = SyntaxGroup.FromLink('p6RxP5ModDef', 'Identifier');
res['syntax-groups']['p6StringSpecial'] = SyntaxGroup.FromLink('p6StringSpecial', 'SpecialChar');
res['syntax-groups']['p6RxP5CountId'] = SyntaxGroup.FromLink('p6RxP5CountId', 'p6StringSpecial');
res['syntax-groups']['p6VarSlash'] = SyntaxGroup.FromLink('p6VarSlash', 'Identifier');
res['syntax-groups']['p6VarExclam'] = SyntaxGroup.FromLink('p6VarExclam', 'Identifier');
res['syntax-groups']['p6VarMatch'] = SyntaxGroup.FromLink('p6VarMatch', 'Identifier');
res['syntax-groups']['p6VarNum'] = SyntaxGroup.FromLink('p6VarNum', 'Identifier');
res['syntax-groups']['p6VarName'] = SyntaxGroup.FromLink('p6VarName', 'Identifier');
res['syntax-groups']['p6PackageScope'] = SyntaxGroup.FromLink('p6PackageScope', 'Normal');
res['syntax-groups']['p6Match'] = SyntaxGroup.FromLink('p6Match', 'p6String');
res['syntax-groups']['p6Substitution'] = SyntaxGroup.FromLink('p6Substitution', 'p6String');
res['syntax-groups']['p6Variables'] = SyntaxGroup.FromColor('p6Variables', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6Transliteration'] = SyntaxGroup.FromLink('p6Transliteration', 'p6String');
res['syntax-groups']['p6String'] = SyntaxGroup.FromLink('p6String', 'String');
res['syntax-groups']['p6Error'] = SyntaxGroup.FromLink('p6Error', 'Error');
res['syntax-groups']['p6PodPrefix'] = SyntaxGroup.FromLink('p6PodPrefix', 'Statement');
res['syntax-groups']['p6PodAbbrNoCodeType'] = SyntaxGroup.FromColor('p6PodAbbrNoCodeType', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodAbbrRegion'] = SyntaxGroup.FromColor('p6PodAbbrRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodType'] = SyntaxGroup.FromLink('p6PodType', 'Type');
res['syntax-groups']['p6PodName'] = SyntaxGroup.FromLink('p6PodName', 'Identifier');
res['syntax-groups']['p6PodAbbrNoCode'] = SyntaxGroup.FromLink('p6PodAbbrNoCode', 'p6Pod');
res['syntax-groups']['p6PodComment'] = SyntaxGroup.FromLink('p6PodComment', 'Comment');
res['syntax-groups']['p6PodAbbrCodeType'] = SyntaxGroup.FromColor('p6PodAbbrCodeType', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodAbbrCode'] = SyntaxGroup.FromLink('p6PodAbbrCode', 'p6PodCode');
res['syntax-groups']['p6PodAbbrCommentType'] = SyntaxGroup.FromColor('p6PodAbbrCommentType', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodAbbrType'] = SyntaxGroup.FromColor('p6PodAbbrType', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodAbbr'] = SyntaxGroup.FromLink('p6PodAbbr', 'p6Pod');
res['syntax-groups']['p6PodImplicitCode'] = SyntaxGroup.FromLink('p6PodImplicitCode', 'p6PodCode');
res['syntax-groups']['p6PodAbbrEOFType'] = SyntaxGroup.FromColor('p6PodAbbrEOFType', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodAbbrEOF'] = SyntaxGroup.FromLink('p6PodAbbrEOF', 'p6Pod');
res['syntax-groups']['p6PodDirectArgRegion'] = SyntaxGroup.FromColor('p6PodDirectArgRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodDirectRegion'] = SyntaxGroup.FromColor('p6PodDirectRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodDirectConfigRegion'] = SyntaxGroup.FromColor('p6PodDirectConfigRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodEncodingArgRegion'] = SyntaxGroup.FromColor('p6PodEncodingArgRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodParaNoCodeTypeRegion'] = SyntaxGroup.FromColor('p6PodParaNoCodeTypeRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodParaRegion'] = SyntaxGroup.FromColor('p6PodParaRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodParaNoCode'] = SyntaxGroup.FromLink('p6PodParaNoCode', 'p6Pod');
res['syntax-groups']['p6PodParaConfigRegion'] = SyntaxGroup.FromColor('p6PodParaConfigRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodParaCodeTypeRegion'] = SyntaxGroup.FromColor('p6PodParaCodeTypeRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodParaCode'] = SyntaxGroup.FromLink('p6PodParaCode', 'p6PodCode');
res['syntax-groups']['p6PodParaTypeRegion'] = SyntaxGroup.FromColor('p6PodParaTypeRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodPara'] = SyntaxGroup.FromLink('p6PodPara', 'p6Pod');
res['syntax-groups']['p6PodParaEOFTypeRegion'] = SyntaxGroup.FromColor('p6PodParaEOFTypeRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodParaEOF'] = SyntaxGroup.FromLink('p6PodParaEOF', 'p6Pod');
res['syntax-groups']['p6PodDelimNoCodeTypeRegion'] = SyntaxGroup.FromColor('p6PodDelimNoCodeTypeRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodDelimRegion'] = SyntaxGroup.FromColor('p6PodDelimRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodDelimNoCode'] = SyntaxGroup.FromLink('p6PodDelimNoCode', 'p6Pod');
res['syntax-groups']['p6PodDelimConfigRegion'] = SyntaxGroup.FromColor('p6PodDelimConfigRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodDelimCodeTypeRegion'] = SyntaxGroup.FromColor('p6PodDelimCodeTypeRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodDelimCode'] = SyntaxGroup.FromLink('p6PodDelimCode', 'p6PodCode');
res['syntax-groups']['p6PodDelimTypeRegion'] = SyntaxGroup.FromColor('p6PodDelimTypeRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodDelim'] = SyntaxGroup.FromLink('p6PodDelim', 'p6Pod');
res['syntax-groups']['p6PodDelimEOFTypeRegion'] = SyntaxGroup.FromColor('p6PodDelimEOFTypeRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodDelimEOF'] = SyntaxGroup.FromLink('p6PodDelimEOF', 'p6Pod');
res['syntax-groups']['p6PodConfigOperator'] = SyntaxGroup.FromLink('p6PodConfigOperator', 'Operator');
res['syntax-groups']['p6PodExtraConfig'] = SyntaxGroup.FromLink('p6PodExtraConfig', 'p6PodPrefix');
res['syntax-groups']['p6PodAutoQuote'] = SyntaxGroup.FromLink('p6PodAutoQuote', 'Operator');
res['syntax-groups']['p6PodParens'] = SyntaxGroup.FromColor('p6PodParens', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodConfigOption'] = SyntaxGroup.FromLink('p6PodConfigOption', 'String');
res['syntax-groups']['p6PodVerticalBar'] = SyntaxGroup.FromLink('p6PodVerticalBar', 'p6PodFormatCode');
res['syntax-groups']['p6PodColon'] = SyntaxGroup.FromLink('p6PodColon', 'p6PodFormatCode');
res['syntax-groups']['p6PodSemicolon'] = SyntaxGroup.FromLink('p6PodSemicolon', 'p6PodFormatCode');
res['syntax-groups']['p6PodComma'] = SyntaxGroup.FromLink('p6PodComma', 'p6PodFormatCode');
res['syntax-groups']['p6PodDelimEndRegion'] = SyntaxGroup.FromColor('p6PodDelimEndRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodFormatOne'] = SyntaxGroup.FromLink('p6PodFormatOne', 'p6PodFormat');
res['syntax-groups']['p6PodFormatTwo'] = SyntaxGroup.FromLink('p6PodFormatTwo', 'p6PodFormat');
res['syntax-groups']['p6PodFormatThree'] = SyntaxGroup.FromLink('p6PodFormatThree', 'p6PodFormat');
res['syntax-groups']['p6PodFormatFrench'] = SyntaxGroup.FromLink('p6PodFormatFrench', 'p6PodFormat');
res['syntax-groups']['p6PodFormat'] = SyntaxGroup.FromLink('p6PodFormat', 'SpecialComment');
res['syntax-groups']['p6PodFormatAnglesFrench'] = SyntaxGroup.FromColor('p6PodFormatAnglesFrench', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodFormatAnglesOne'] = SyntaxGroup.FromColor('p6PodFormatAnglesOne', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodFormatAnglesTwo'] = SyntaxGroup.FromColor('p6PodFormatAnglesTwo', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodFormatAnglesThree'] = SyntaxGroup.FromColor('p6PodFormatAnglesThree', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6PodFormatCode'] = SyntaxGroup.FromLink('p6PodFormatCode', 'SpecialChar');
res['syntax-groups']['p6PodFormatAngleTwo'] = SyntaxGroup.FromColor('p6PodFormatAngleTwo', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['p6RxP5'] = SyntaxGroup.FromLink('p6RxP5', 'p6StringSpecial2');
res['syntax-groups']['p6Package'] = SyntaxGroup.FromLink('p6Package', 'Normal');
res['syntax-groups']['p6Keyword'] = SyntaxGroup.FromLink('p6Keyword', 'Keyword');
res['syntax-groups']['p6Pod'] = SyntaxGroup.FromLink('p6Pod', 'Comment');
res['syntax-groups']['p6PodCode'] = SyntaxGroup.FromLink('p6PodCode', 'PreProc');
return res;
} ())
;
res['snippets'] = [];
res['snippets'].push({
  'title': 'Find Missing Perm',
  'terminal-contents': '<vp6-var-storage>my</vp6-var-storage><v-normal> </v-normal><vp6-variable>@</vp6-variable><vp6-var-name>givens</vp6-var-name><v-normal> </v-normal><vp6-operator>=</vp6-operator><v-normal> </v-normal><vp6-quote>&lt;</vp6-quote><vp6-string-angle>ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC BCAD CADB CDBA</vp6-string-angle><v-normal>       </v-normal>\n<vp6-string-angle>                CBAD ABDC ADBC BDCA DCBA BACD BADC BDAC CBDA DBCA DCAB</vp6-string-angle><vp6-quote>&gt;</vp6-quote><vp6-operator>;</vp6-operator><v-normal>        </v-normal>\n<v-normal>                                                                                </v-normal>\n<vp6-var-storage>my</vp6-var-storage><v-normal> </v-normal><vp6-variable>@</vp6-variable><vp6-var-name>perms</vp6-var-name><v-normal> </v-normal><vp6-operator>=</vp6-operator><v-normal> [</v-normal><vp6-quote>&lt;</vp6-quote><vp6-string-angle>A B C D</vp6-string-angle><vp6-quote>&gt;</vp6-quote><v-normal>]</v-normal><vp6-operator>.</vp6-operator><vp6-normal>permutations</vp6-normal><vp6-operator>.</vp6-operator><vp6-normal>tree</vp6-normal><vp6-operator>.</vp6-operator><vp6-routine>map</vp6-routine><vp6-operator>:</vp6-operator><v-normal> </v-normal><vp6-operator>*.</vp6-operator><vp6-routine>join</vp6-routine><vp6-operator>;</vp6-operator><v-normal>                          </v-normal>\n<v-normal>                                                                                </v-normal>\n<vp6-operator>.</vp6-operator><vp6-routine>say</vp6-routine><v-normal> </v-normal><vp6-flow-control>when</vp6-flow-control><v-normal> </v-normal><vp6-routine>none</vp6-routine><v-normal>(</v-normal><vp6-variable>@</vp6-variable><vp6-var-name>givens</vp6-var-name><v-normal>) </v-normal><vp6-repeat>for</vp6-repeat><v-normal> </v-normal><vp6-variable>@</vp6-variable><vp6-var-name>perms</vp6-var-name><vp6-operator>;</vp6-operator><v-normal>                                             </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
res['snippets'].push({
  'title': 'File Input/Output',
  'terminal-contents': '<vp6-var-storage>my</vp6-var-storage><v-normal> </v-normal><vp6-variable>$</vp6-variable><vp6-var-name>in</vp6-var-name><v-normal> </v-normal><vp6-operator>=</vp6-operator><v-normal> </v-normal><vp6-routine>open</vp6-routine><v-normal> </v-normal><vp6-quote>&quot;</vp6-quote><vp6-string-d-q>input.txt</vp6-string-d-q><vp6-quote>&quot;</vp6-quote><vp6-operator>;</vp6-operator><v-normal>                                                      </v-normal>\n<vp6-var-storage>my</vp6-var-storage><v-normal> </v-normal><vp6-variable>$</vp6-variable><vp6-var-name>out</vp6-var-name><v-normal> </v-normal><vp6-operator>=</vp6-operator><v-normal> </v-normal><vp6-routine>open</vp6-routine><v-normal> </v-normal><vp6-quote>&quot;</vp6-quote><vp6-string-d-q>output.txt</vp6-string-d-q><vp6-quote>&quot;</vp6-quote><vp6-operator>,</vp6-operator><v-normal> </v-normal><vp6-operator>:</vp6-operator><vp6-key>w</vp6-key><vp6-operator>;</vp6-operator><v-normal>                                                </v-normal>\n<vp6-repeat>for</vp6-repeat><v-normal> </v-normal><vp6-variable>$</vp6-variable><vp6-var-name>in</vp6-var-name><vp6-operator>.</vp6-operator><vp6-routine>lines</vp6-routine><v-normal> </v-normal><vp6-operator>-&gt;</vp6-operator><v-normal> </v-normal><vp6-variable>$</vp6-variable><vp6-var-name>line</vp6-var-name><v-normal> {                                                        </v-normal>\n<v-normal>        </v-normal><vp6-variable>$</vp6-variable><vp6-var-name>out</vp6-var-name><vp6-operator>.</vp6-operator><vp6-routine>say</vp6-routine><v-normal>(</v-normal><vp6-variable>$</vp6-variable><vp6-var-name>line</vp6-var-name><v-normal>)</v-normal><vp6-operator>;</vp6-operator><v-normal>                                                        </v-normal>\n<v-normal>}                                                                               </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
return res;
}())