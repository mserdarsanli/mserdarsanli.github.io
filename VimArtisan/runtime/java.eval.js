(function() {
var res = {};
res['lang-syntax'] = (function() {
var res = {};
res['lang'] = 'Rules for Lang: java';
res['syntax-groups'] = {};
res['syntax-groups']['SpecialKey'] = SyntaxGroup.FromColor('SpecialKey', new TermColor(4), new TermColor(-1));
res['syntax-groups']['NonText'] = SyntaxGroup.FromColor('NonText', new TermColor(12), new TermColor(-1));
res['syntax-groups']['Directory'] = SyntaxGroup.FromColor('Directory', new TermColor(4), new TermColor(-1));
res['syntax-groups']['IncSearch'] = SyntaxGroup.FromColor('IncSearch', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ModeMsg'] = SyntaxGroup.FromColor('ModeMsg', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['LineNr'] = SyntaxGroup.FromColor('LineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['CursorLineNr'] = SyntaxGroup.FromColor('CursorLineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['StatusLineNC'] = SyntaxGroup.FromColor('StatusLineNC', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['VertSplit'] = SyntaxGroup.FromColor('VertSplit', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['Title'] = SyntaxGroup.FromColor('Title', new TermColor(5), new TermColor(-1));
res['syntax-groups']['VisualNOS'] = SyntaxGroup.FromColor('VisualNOS', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['WildMenu'] = SyntaxGroup.FromColor('WildMenu', new TermColor(0), new TermColor(11));
res['syntax-groups']['Folded'] = SyntaxGroup.FromColor('Folded', new TermColor(4), new TermColor(248));
res['syntax-groups']['FoldColumn'] = SyntaxGroup.FromColor('FoldColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['DiffAdd'] = SyntaxGroup.FromColor('DiffAdd', new TermColor(-1), new TermColor(81));
res['syntax-groups']['DiffChange'] = SyntaxGroup.FromColor('DiffChange', new TermColor(-1), new TermColor(225));
res['syntax-groups']['DiffDelete'] = SyntaxGroup.FromColor('DiffDelete', new TermColor(12), new TermColor(159));
res['syntax-groups']['DiffText'] = SyntaxGroup.FromColor('DiffText', new TermColor(-1), new TermColor(9));
res['syntax-groups']['SignColumn'] = SyntaxGroup.FromColor('SignColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['Conceal'] = SyntaxGroup.FromColor('Conceal', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['SpellBad'] = SyntaxGroup.FromColor('SpellBad', new TermColor(-1), new TermColor(224));
res['syntax-groups']['SpellCap'] = SyntaxGroup.FromColor('SpellCap', new TermColor(-1), new TermColor(81));
res['syntax-groups']['SpellRare'] = SyntaxGroup.FromColor('SpellRare', new TermColor(-1), new TermColor(225));
res['syntax-groups']['SpellLocal'] = SyntaxGroup.FromColor('SpellLocal', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Pmenu'] = SyntaxGroup.FromColor('Pmenu', new TermColor(0), new TermColor(225));
res['syntax-groups']['PmenuSel'] = SyntaxGroup.FromColor('PmenuSel', new TermColor(0), new TermColor(7));
res['syntax-groups']['PmenuSbar'] = SyntaxGroup.FromColor('PmenuSbar', new TermColor(-1), new TermColor(248));
res['syntax-groups']['PmenuThumb'] = SyntaxGroup.FromColor('PmenuThumb', new TermColor(-1), new TermColor(0));
res['syntax-groups']['TabLine'] = SyntaxGroup.FromColor('TabLine', new TermColor(0), new TermColor(7));
res['syntax-groups']['TabLineSel'] = SyntaxGroup.FromColor('TabLineSel', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['TabLineFill'] = SyntaxGroup.FromColor('TabLineFill', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['CursorColumn'] = SyntaxGroup.FromColor('CursorColumn', new TermColor(-1), new TermColor(7));
res['syntax-groups']['CursorLine'] = SyntaxGroup.FromColor('CursorLine', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ColorColumn'] = SyntaxGroup.FromColor('ColorColumn', new TermColor(-1), new TermColor(224));
res['syntax-groups']['MatchParen'] = SyntaxGroup.FromColor('MatchParen', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Underlined'] = SyntaxGroup.FromColor('Underlined', new TermColor(5), new TermColor(-1));
res['syntax-groups']['Ignore'] = SyntaxGroup.FromColor('Ignore', new TermColor(15), new TermColor(-1));
res['syntax-groups']['javaFold'] = SyntaxGroup.FromColor('javaFold', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaError'] = SyntaxGroup.FromLink('javaError', 'Error');
res['syntax-groups']['javaOK'] = SyntaxGroup.FromColor('javaOK', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaError2'] = SyntaxGroup.FromLink('javaError2', 'javaError');
res['syntax-groups']['javaExternal'] = SyntaxGroup.FromLink('javaExternal', 'Include');
res['syntax-groups']['javaConditional'] = SyntaxGroup.FromLink('javaConditional', 'Conditional');
res['syntax-groups']['javaRepeat'] = SyntaxGroup.FromLink('javaRepeat', 'Repeat');
res['syntax-groups']['javaBoolean'] = SyntaxGroup.FromLink('javaBoolean', 'Boolean');
res['syntax-groups']['javaConstant'] = SyntaxGroup.FromLink('javaConstant', 'Constant');
res['syntax-groups']['javaTypedef'] = SyntaxGroup.FromLink('javaTypedef', 'Typedef');
res['syntax-groups']['javaOperator'] = SyntaxGroup.FromLink('javaOperator', 'Operator');
res['syntax-groups']['javaType'] = SyntaxGroup.FromLink('javaType', 'Type');
res['syntax-groups']['javaStatement'] = SyntaxGroup.FromLink('javaStatement', 'Statement');
res['syntax-groups']['javaStorageClass'] = SyntaxGroup.FromLink('javaStorageClass', 'StorageClass');
res['syntax-groups']['javaExceptions'] = SyntaxGroup.FromLink('javaExceptions', 'Exception');
res['syntax-groups']['javaAssert'] = SyntaxGroup.FromLink('javaAssert', 'Statement');
res['syntax-groups']['javaMethodDecl'] = SyntaxGroup.FromLink('javaMethodDecl', 'javaStorageClass');
res['syntax-groups']['javaClassDecl'] = SyntaxGroup.FromLink('javaClassDecl', 'javaStorageClass');
res['syntax-groups']['javaString'] = SyntaxGroup.FromLink('javaString', 'String');
res['syntax-groups']['javaAnnotation'] = SyntaxGroup.FromLink('javaAnnotation', 'PreProc');
res['syntax-groups']['javaBranch'] = SyntaxGroup.FromLink('javaBranch', 'Conditional');
res['syntax-groups']['javaUserLabelRef'] = SyntaxGroup.FromLink('javaUserLabelRef', 'javaUserLabel');
res['syntax-groups']['javaVarArg'] = SyntaxGroup.FromLink('javaVarArg', 'Function');
res['syntax-groups']['javaScopeDecl'] = SyntaxGroup.FromLink('javaScopeDecl', 'javaStorageClass');
res['syntax-groups']['javaR_JavaLang'] = SyntaxGroup.FromColor('javaR_JavaLang', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaC_JavaLang'] = SyntaxGroup.FromColor('javaC_JavaLang', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaE_JavaLang'] = SyntaxGroup.FromColor('javaE_JavaLang', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaX_JavaLang'] = SyntaxGroup.FromColor('javaX_JavaLang', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaLangObject'] = SyntaxGroup.FromColor('javaLangObject', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaLabel'] = SyntaxGroup.FromLink('javaLabel', 'Label');
res['syntax-groups']['javaNumber'] = SyntaxGroup.FromLink('javaNumber', 'Number');
res['syntax-groups']['javaCharacter'] = SyntaxGroup.FromLink('javaCharacter', 'Character');
res['syntax-groups']['javaLabelRegion'] = SyntaxGroup.FromColor('javaLabelRegion', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaUserLabel'] = SyntaxGroup.FromLink('javaUserLabel', 'Label');
res['syntax-groups']['javaTodo'] = SyntaxGroup.FromLink('javaTodo', 'Todo');
res['syntax-groups']['javaSpecial'] = SyntaxGroup.FromLink('javaSpecial', 'Special');
res['syntax-groups']['javaCommentStar'] = SyntaxGroup.FromLink('javaCommentStar', 'javaComment');
res['syntax-groups']['javaSpecialChar'] = SyntaxGroup.FromLink('javaSpecialChar', 'SpecialChar');
res['syntax-groups']['javaComment'] = SyntaxGroup.FromLink('javaComment', 'Comment');
res['syntax-groups']['javaLineComment'] = SyntaxGroup.FromLink('javaLineComment', 'Comment');
res['syntax-groups']['javaCommentString'] = SyntaxGroup.FromLink('javaCommentString', 'javaString');
res['syntax-groups']['javaComment2String'] = SyntaxGroup.FromLink('javaComment2String', 'javaString');
res['syntax-groups']['javaCommentCharacter'] = SyntaxGroup.FromLink('javaCommentCharacter', 'javaCharacter');
res['syntax-groups']['htmlError'] = SyntaxGroup.FromLink('htmlError', 'Error');
res['syntax-groups']['htmlSpecialChar'] = SyntaxGroup.FromLink('htmlSpecialChar', 'Special');
res['syntax-groups']['javaScriptExpression'] = SyntaxGroup.FromLink('javaScriptExpression', 'javaScript');
res['syntax-groups']['htmlString'] = SyntaxGroup.FromLink('htmlString', 'String');
res['syntax-groups']['htmlValue'] = SyntaxGroup.FromLink('htmlValue', 'String');
res['syntax-groups']['htmlTagN'] = SyntaxGroup.FromColor('htmlTagN', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlTagError'] = SyntaxGroup.FromLink('htmlTagError', 'htmlError');
res['syntax-groups']['htmlEndTag'] = SyntaxGroup.FromLink('htmlEndTag', 'Identifier');
res['syntax-groups']['htmlArg'] = SyntaxGroup.FromLink('htmlArg', 'Type');
res['syntax-groups']['htmlEvent'] = SyntaxGroup.FromLink('htmlEvent', 'javaScript');
res['syntax-groups']['htmlCssDefinition'] = SyntaxGroup.FromLink('htmlCssDefinition', 'Special');
res['syntax-groups']['htmlTag'] = SyntaxGroup.FromLink('htmlTag', 'Function');
res['syntax-groups']['htmlTagName'] = SyntaxGroup.FromLink('htmlTagName', 'htmlStatement');
res['syntax-groups']['htmlSpecialTagName'] = SyntaxGroup.FromLink('htmlSpecialTagName', 'Exception');
res['syntax-groups']['htmlCommentPart'] = SyntaxGroup.FromLink('htmlCommentPart', 'Comment');
res['syntax-groups']['htmlCommentError'] = SyntaxGroup.FromLink('htmlCommentError', 'htmlError');
res['syntax-groups']['htmlComment'] = SyntaxGroup.FromLink('htmlComment', 'Comment');
res['syntax-groups']['htmlPreStmt'] = SyntaxGroup.FromLink('htmlPreStmt', 'PreProc');
res['syntax-groups']['htmlPreError'] = SyntaxGroup.FromLink('htmlPreError', 'Error');
res['syntax-groups']['htmlPreAttr'] = SyntaxGroup.FromLink('htmlPreAttr', 'String');
res['syntax-groups']['htmlPreProc'] = SyntaxGroup.FromLink('htmlPreProc', 'PreProc');
res['syntax-groups']['htmlPreProcAttrError'] = SyntaxGroup.FromLink('htmlPreProcAttrError', 'Error');
res['syntax-groups']['htmlPreProcAttrName'] = SyntaxGroup.FromLink('htmlPreProcAttrName', 'PreProc');
res['syntax-groups']['htmlLink'] = SyntaxGroup.FromLink('htmlLink', 'Underlined');
res['syntax-groups']['javaScript'] = SyntaxGroup.FromLink('javaScript', 'Special');
res['syntax-groups']['htmlBoldUnderline'] = SyntaxGroup.FromColor('htmlBoldUnderline', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlBoldItalic'] = SyntaxGroup.FromColor('htmlBoldItalic', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlBold'] = SyntaxGroup.FromColor('htmlBold', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlBoldUnderlineItalic'] = SyntaxGroup.FromColor('htmlBoldUnderlineItalic', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlBoldItalicUnderline'] = SyntaxGroup.FromLink('htmlBoldItalicUnderline', 'htmlBoldUnderlineItalic');
res['syntax-groups']['htmlUnderlineBold'] = SyntaxGroup.FromLink('htmlUnderlineBold', 'htmlBoldUnderline');
res['syntax-groups']['htmlUnderlineItalic'] = SyntaxGroup.FromColor('htmlUnderlineItalic', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlUnderline'] = SyntaxGroup.FromColor('htmlUnderline', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlUnderlineBoldItalic'] = SyntaxGroup.FromLink('htmlUnderlineBoldItalic', 'htmlBoldUnderlineItalic');
res['syntax-groups']['htmlUnderlineItalicBold'] = SyntaxGroup.FromLink('htmlUnderlineItalicBold', 'htmlBoldUnderlineItalic');
res['syntax-groups']['htmlItalicBold'] = SyntaxGroup.FromLink('htmlItalicBold', 'htmlBoldItalic');
res['syntax-groups']['htmlItalicUnderline'] = SyntaxGroup.FromLink('htmlItalicUnderline', 'htmlUnderlineItalic');
res['syntax-groups']['htmlItalic'] = SyntaxGroup.FromColor('htmlItalic', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlItalicBoldUnderline'] = SyntaxGroup.FromLink('htmlItalicBoldUnderline', 'htmlBoldUnderlineItalic');
res['syntax-groups']['htmlItalicUnderlineBold'] = SyntaxGroup.FromLink('htmlItalicUnderlineBold', 'htmlBoldUnderlineItalic');
res['syntax-groups']['htmlLeadingSpace'] = SyntaxGroup.FromLink('htmlLeadingSpace', 'None');
res['syntax-groups']['htmlH1'] = SyntaxGroup.FromLink('htmlH1', 'Title');
res['syntax-groups']['htmlH2'] = SyntaxGroup.FromLink('htmlH2', 'htmlH1');
res['syntax-groups']['htmlH3'] = SyntaxGroup.FromLink('htmlH3', 'htmlH2');
res['syntax-groups']['htmlH4'] = SyntaxGroup.FromLink('htmlH4', 'htmlH3');
res['syntax-groups']['htmlH5'] = SyntaxGroup.FromLink('htmlH5', 'htmlH4');
res['syntax-groups']['htmlH6'] = SyntaxGroup.FromLink('htmlH6', 'htmlH5');
res['syntax-groups']['htmlTitle'] = SyntaxGroup.FromLink('htmlTitle', 'Title');
res['syntax-groups']['cssStyle'] = SyntaxGroup.FromColor('cssStyle', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlHead'] = SyntaxGroup.FromLink('htmlHead', 'PreProc');
res['syntax-groups']['htmlCssStyleComment'] = SyntaxGroup.FromLink('htmlCssStyleComment', 'Comment');
res['syntax-groups']['htmlScriptTag'] = SyntaxGroup.FromColor('htmlScriptTag', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlEventSQ'] = SyntaxGroup.FromColor('htmlEventSQ', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlEventDQ'] = SyntaxGroup.FromColor('htmlEventDQ', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlStatement'] = SyntaxGroup.FromLink('htmlStatement', 'Statement');
res['syntax-groups']['None'] = SyntaxGroup.FromColor('None', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['htmlSpecial'] = SyntaxGroup.FromLink('htmlSpecial', 'Special');
res['syntax-groups']['javaCommentTitle'] = SyntaxGroup.FromLink('javaCommentTitle', 'SpecialComment');
res['syntax-groups']['javaDocTags'] = SyntaxGroup.FromLink('javaDocTags', 'Special');
res['syntax-groups']['javaDocSeeTag'] = SyntaxGroup.FromColor('javaDocSeeTag', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaDocComment'] = SyntaxGroup.FromLink('javaDocComment', 'Comment');
res['syntax-groups']['javaDocParam'] = SyntaxGroup.FromLink('javaDocParam', 'Function');
res['syntax-groups']['javaDocSeeTagParam'] = SyntaxGroup.FromLink('javaDocSeeTagParam', 'Function');
res['syntax-groups']['javaSpecialError'] = SyntaxGroup.FromLink('javaSpecialError', 'Error');
res['syntax-groups']['javaSpecialCharError'] = SyntaxGroup.FromLink('javaSpecialCharError', 'Error');
res['syntax-groups']['javaStringError'] = SyntaxGroup.FromLink('javaStringError', 'Error');
res['syntax-groups']['javaDebugSpecial'] = SyntaxGroup.FromColor('javaDebugSpecial', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaDebugBoolean'] = SyntaxGroup.FromColor('javaDebugBoolean', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaDebugType'] = SyntaxGroup.FromColor('javaDebugType', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaDebugParen'] = SyntaxGroup.FromColor('javaDebugParen', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaParen'] = SyntaxGroup.FromColor('javaParen', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaParenT1'] = SyntaxGroup.FromColor('javaParenT1', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaParenT'] = SyntaxGroup.FromColor('javaParenT', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaParen1'] = SyntaxGroup.FromColor('javaParen1', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaParenT2'] = SyntaxGroup.FromColor('javaParenT2', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaParen2'] = SyntaxGroup.FromColor('javaParen2', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['javaParenError'] = SyntaxGroup.FromLink('javaParenError', 'javaError');
res['syntax-groups']['javaLambdaDef'] = SyntaxGroup.FromLink('javaLambdaDef', 'Function');
res['syntax-groups']['javaFuncDef'] = SyntaxGroup.FromLink('javaFuncDef', 'Function');
res['syntax-groups']['javaBraces'] = SyntaxGroup.FromLink('javaBraces', 'Function');
res['syntax-groups']['javaSpaceError'] = SyntaxGroup.FromLink('javaSpaceError', 'Error');
return res;
} ())
;
res['snippets'] = [];
res['snippets'].push({
  'title': 'Hello, World!',
  'terminal-contents': '<vjava-class-decl>class</vjava-class-decl><v-normal> HelloWorldApp {                                                           </v-normal>\n<v-normal>    </v-normal><vjava-scope-decl>public</vjava-scope-decl><v-normal> </v-normal><vjava-storage-class>static</vjava-storage-class><v-normal> </v-normal><vjava-type>void</vjava-type><v-normal> main</v-normal><vjava-paren>(</vjava-paren><v-normal>String</v-normal><vjava-paren1>[]</vjava-paren1><v-normal> args</v-normal><vjava-paren>)</vjava-paren><v-normal> {                                    </v-normal>\n<v-normal>        </v-normal><vjava-line-comment>// Prints the string to the console.</vjava-line-comment><v-normal>                                    </v-normal>\n<v-normal>        System.out.println</v-normal><vjava-paren>(</vjava-paren><vjava-string>&quot;Hello World!&quot;</vjava-string><vjava-paren>)</vjava-paren><v-normal>;                                     </v-normal>\n<v-normal>    }                                                                           </v-normal>\n<v-normal>}                                                                               </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
res['snippets'].push({
  'title': 'Javadoc',
  'terminal-contents': '<vjava-doc-comment>/**</vjava-doc-comment><v-normal>                                                                             </v-normal>\n<vjava-comment-star> </vjava-comment-star><vjava-doc-comment>* </vjava-doc-comment><vjava-doc-tags>@author</vjava-doc-tags><vjava-doc-comment>      Firstname Lastname </vjava-doc-comment><vhtml-tag>&lt;</vhtml-tag><vhtml-tag-name>address</vhtml-tag-name><vhtml-tag> @ example.com&gt;</vhtml-tag><v-normal>                      </v-normal>\n<vjava-doc-comment> * </vjava-doc-comment><vjava-doc-tags>@version</vjava-doc-tags><vjava-doc-comment>     1.6                 (current version number of program)</vjava-doc-comment><v-normal>         </v-normal>\n<vjava-doc-comment> * </vjava-doc-comment><vjava-doc-tags>@since      </vjava-doc-tags><vjava-doc-param> 2010-03-31</vjava-doc-param><vjava-doc-comment>          (the version of the package this class was f</vjava-doc-comment>\n<vjava-doc-comment>irst added to)</vjava-doc-comment><v-normal>                                                                  </v-normal>\n<vjava-doc-comment> */</vjava-doc-comment><v-normal>                                                                             </v-normal>\n<vjava-scope-decl>public</vjava-scope-decl><v-normal> </v-normal><vjava-class-decl>class</vjava-class-decl><v-normal> Test {                                                             </v-normal>\n<v-normal>  </v-normal><vjava-doc-comment>/**</vjava-doc-comment><v-normal>                                                                           </v-normal>\n<vjava-comment-star>   *</vjava-comment-star><vjava-comment-title> Short one line description.</vjava-comment-title><vjava-doc-comment>                           (1)</vjava-doc-comment><v-normal>                  </v-normal>\n<vjava-doc-comment>   * </vjava-doc-comment><vhtml-tag>&lt;</vhtml-tag><vhtml-tag-name>p</vhtml-tag-name><vhtml-tag>&gt;</vhtml-tag><v-normal>                                                                        </v-normal>\n<vjava-doc-comment>   * Longer description. If there were any, it would be    [2]</vjava-doc-comment><v-normal>                  </v-normal>\n<vjava-doc-comment>   * here.</vjava-doc-comment><v-normal>                                                                      </v-normal>\n<vjava-doc-comment>   * </vjava-doc-comment><vhtml-tag>&lt;</vhtml-tag><vhtml-tag-name>p</vhtml-tag-name><vhtml-tag>&gt;</vhtml-tag><v-normal>                                                                        </v-normal>\n<vjava-doc-comment>   * And even more explanations to follow in consecutive</vjava-doc-comment><v-normal>                        </v-normal>\n<vjava-doc-comment>   * paragraphs separated by HTML paragraph breaks.</vjava-doc-comment><v-normal>                             </v-normal>\n<vjava-doc-comment>   *</vjava-doc-comment><v-normal>                                                                            </v-normal>\n<vjava-doc-comment>   * </vjava-doc-comment><vjava-doc-tags>@param </vjava-doc-tags><vjava-doc-param> variable</vjava-doc-param><vjava-doc-comment> Description text text text.          (3)</vjava-doc-comment><v-normal>                  </v-normal>\n<vjava-doc-comment>   * </vjava-doc-comment><vjava-doc-tags>@return</vjava-doc-tags><vjava-doc-comment> Description text text text.</vjava-doc-comment><v-normal>                                        </v-normal>\n<vjava-doc-comment>   */</vjava-doc-comment><v-normal>                                                                           </v-normal>\n<v-normal>  </v-normal><vjava-scope-decl>public</vjava-scope-decl><v-normal> </v-normal><vjava-type>int</vjava-type><v-normal> methodName </v-normal><vjava-paren>(</vjava-paren><vjava-var-arg>...</vjava-var-arg><vjava-paren>)</vjava-paren><v-normal> {                                                 </v-normal>\n<v-normal>      </v-normal><vjava-line-comment>// method body with a return statement</vjava-line-comment><v-normal>                                    </v-normal>\n<v-normal>  }                                                                             </v-normal>\n<v-normal>}                                                                               </v-normal>\n<v-normal>                                                                                </v-normal>\n'
});
res['snippets'].push({
  'title': 'Find Missing Perm',
  'terminal-contents': '<vjava-external>import</vjava-external><v-normal> java.util.ArrayList;                                                     </v-normal>\n<v-normal>                                                                                </v-normal>\n<vjava-external>import</vjava-external><v-normal> com.google.common.base.Joiner;                                           </v-normal>\n<vjava-external>import</vjava-external><v-normal> com.google.common.collect.ImmutableSet;                                  </v-normal>\n<vjava-external>import</vjava-external><v-normal> com.google.common.collect.Lists;                                         </v-normal>\n<v-normal>                                                                                </v-normal>\n<vjava-scope-decl>public</vjava-scope-decl><v-normal> </v-normal><vjava-class-decl>class</vjava-class-decl><v-normal> FindMissingPermutation {                                           </v-normal>\n<v-normal>        </v-normal><vjava-scope-decl>public</vjava-scope-decl><v-normal> </v-normal><vjava-storage-class>static</vjava-storage-class><v-normal> </v-normal><vjava-type>void</vjava-type><v-normal> main</v-normal><vjava-paren>(</vjava-paren><v-normal>String</v-normal><vjava-paren1>[]</vjava-paren1><v-normal> args</v-normal><vjava-paren>)</vjava-paren><v-normal> {                                </v-normal>\n<v-normal>                Joiner joiner = Joiner.on</v-normal><vjava-paren>(</vjava-paren><vjava-string>&quot;&quot;</vjava-string><vjava-paren>)</vjava-paren><v-normal>.skipNulls</v-normal><vjava-paren>()</vjava-paren><v-normal>;                      </v-normal>\n<v-normal>                ImmutableSet&lt;String&gt; s = ImmutableSet.of</v-normal><vjava-paren>(</vjava-paren><vjava-string>&quot;ABCD&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;CABD&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;ACDB&quot;</vjava-string><v-normal>,</v-normal>\n<v-normal>                                </v-normal><vjava-string>&quot;DACB&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;BCDA&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;ACBD&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;ADCB&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;CDAB&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;DABC&quot;</vjava-string><v-normal>, </v-normal>\n<vjava-string>&quot;BCAD&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;CADB&quot;</vjava-string><v-normal>,                                                                 </v-normal>\n<v-normal>                                </v-normal><vjava-string>&quot;CDBA&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;CBAD&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;ABDC&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;ADBC&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;BDCA&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;DCBA&quot;</vjava-string><v-normal>, </v-normal>\n<vjava-string>&quot;BACD&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;BADC&quot;</vjava-string><v-normal>,                                                                 </v-normal>\n<v-normal>                                </v-normal><vjava-string>&quot;BDAC&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;CBDA&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;DBCA&quot;</vjava-string><v-normal>, </v-normal><vjava-string>&quot;DCAB&quot;</vjava-string><vjava-paren>)</vjava-paren><v-normal>;                </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>                </v-normal><vjava-repeat>for</vjava-repeat><v-normal> </v-normal><vjava-paren>(</vjava-paren><v-normal>ArrayList&lt;Character&gt; cs : Utils.Permutations</v-normal><vjava-paren1>(</vjava-paren1><v-normal>Lists.newArray</v-normal>\n<v-normal>List</v-normal><vjava-paren2>(</vjava-paren2><v-normal>                                                                           </v-normal>\n<v-normal>                                </v-normal><vjava-character>&apos;A&apos;</vjava-character><v-normal>, </v-normal><vjava-character>&apos;B&apos;</vjava-character><v-normal>, </v-normal><vjava-character>&apos;C&apos;</vjava-character><v-normal>, </v-normal><vjava-character>&apos;D&apos;</vjava-character><vjava-paren2>)</vjava-paren2><vjava-paren1>)</vjava-paren1><vjava-paren>)</vjava-paren><v-normal>                           </v-normal>\n<v-normal>                        </v-normal><vjava-conditional>if</vjava-conditional><v-normal> </v-normal><vjava-paren>(</vjava-paren><v-normal>!s.contains</v-normal><vjava-paren1>(</vjava-paren1><v-normal>joiner.join</v-normal><vjava-paren2>(</vjava-paren2><v-normal>cs</v-normal><vjava-paren2>)</vjava-paren2><vjava-paren1>)</vjava-paren1><vjava-paren>)</vjava-paren><v-normal>                       </v-normal>\n<v-normal>                                System.out.println</v-normal><vjava-paren>(</vjava-paren><v-normal>joiner.join</v-normal><vjava-paren1>(</vjava-paren1><v-normal>cs</v-normal><vjava-paren1>)</vjava-paren1><vjava-paren>)</vjava-paren><v-normal>;            </v-normal>\n<v-normal>        }                                                                       </v-normal>\n<v-normal>}                                                                               </v-normal>\n<v-normal>                                                                                </v-normal>\n'
});
res['snippets'].push({
  'title': 'File Input/Output',
  'terminal-contents': '<vjava-external>import</vjava-external><v-normal> java.io.*;                                                               </v-normal>\n<v-normal>                                                                                </v-normal>\n<vjava-scope-decl>public</vjava-scope-decl><v-normal> </v-normal><vjava-class-decl>class</vjava-class-decl><v-normal> FileIODemo {                                                       </v-normal>\n<v-normal>  </v-normal><vjava-scope-decl>public</vjava-scope-decl><v-normal> </v-normal><vjava-storage-class>static</vjava-storage-class><v-normal> </v-normal><vjava-type>void</vjava-type><v-normal> main</v-normal><vjava-paren>(</vjava-paren><v-normal>String</v-normal><vjava-paren1>[]</vjava-paren1><v-normal> args</v-normal><vjava-paren>)</vjava-paren><v-normal> {                                      </v-normal>\n<v-normal>    </v-normal><vjava-exceptions>try</vjava-exceptions><v-normal> {                                                                       </v-normal>\n<v-normal>      FileInputStream in = </v-normal><vjava-operator>new</vjava-operator><v-normal> FileInputStream</v-normal><vjava-paren>(</vjava-paren><vjava-string>&quot;input.txt&quot;</vjava-string><vjava-paren>)</vjava-paren><v-normal>;                    </v-normal>\n<v-normal>      FileOutputStream out = </v-normal><vjava-operator>new</vjava-operator><v-normal> FileOutputStream</v-normal><vjava-paren>(</vjava-paren><vjava-string>&quot;ouput.txt&quot;</vjava-string><vjava-paren>)</vjava-paren><v-normal>;                 </v-normal>\n<v-normal>      </v-normal><vjava-type>int</vjava-type><v-normal> c;                                                                    </v-normal>\n<v-normal>      </v-normal><vjava-repeat>while</vjava-repeat><v-normal> </v-normal><vjava-paren>(</vjava-paren><vjava-paren1>(</vjava-paren1><v-normal>c = in.read</v-normal><vjava-paren2>()</vjava-paren2><vjava-paren1>)</vjava-paren1><v-normal> != -</v-normal><vjava-number>1</vjava-number><vjava-paren>)</vjava-paren><v-normal> {                                           </v-normal>\n<v-normal>        out.write</v-normal><vjava-paren>(</vjava-paren><v-normal>c</v-normal><vjava-paren>)</vjava-paren><v-normal>;                                                           </v-normal>\n<v-normal>      }                                                                         </v-normal>\n<v-normal>    } </v-normal><vjava-exceptions>catch</vjava-exceptions><v-normal> </v-normal><vjava-paren>(</vjava-paren><v-normal>FileNotFoundException e</v-normal><vjava-paren>)</vjava-paren><v-normal> {                                         </v-normal>\n<v-normal>      e.printStackTrace</v-normal><vjava-paren>()</vjava-paren><v-normal>;                                                      </v-normal>\n<v-normal>    } </v-normal><vjava-exceptions>catch</vjava-exceptions><v-normal> </v-normal><vjava-paren>(</vjava-paren><v-normal>IOException e</v-normal><vjava-paren>)</vjava-paren><v-normal>{                                                    </v-normal>\n<v-normal>      e.printStackTrace</v-normal><vjava-paren>()</vjava-paren><v-normal>;                                                      </v-normal>\n<v-normal>    }                                                                           </v-normal>\n<v-normal>  }                                                                             </v-normal>\n<v-normal>}                                                                               </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
return res;
}())