(function() {
var res = {};
res['lang-syntax'] = (function() {
var res = {};
res['lang'] = 'Rules for Lang: lisp';
res['syntax-groups'] = {};
res['syntax-groups']['SpecialKey'] = SyntaxGroup.FromColor('SpecialKey', new TermColor(4), new TermColor(-1));
res['syntax-groups']['NonText'] = SyntaxGroup.FromColor('NonText', new TermColor(12), new TermColor(-1));
res['syntax-groups']['Directory'] = SyntaxGroup.FromColor('Directory', new TermColor(4), new TermColor(-1));
res['syntax-groups']['IncSearch'] = SyntaxGroup.FromColor('IncSearch', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ModeMsg'] = SyntaxGroup.FromColor('ModeMsg', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['LineNr'] = SyntaxGroup.FromColor('LineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['CursorLineNr'] = SyntaxGroup.FromColor('CursorLineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['StatusLineNC'] = SyntaxGroup.FromColor('StatusLineNC', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['VertSplit'] = SyntaxGroup.FromColor('VertSplit', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['Title'] = SyntaxGroup.FromColor('Title', new TermColor(5), new TermColor(-1));
res['syntax-groups']['VisualNOS'] = SyntaxGroup.FromColor('VisualNOS', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['WildMenu'] = SyntaxGroup.FromColor('WildMenu', new TermColor(0), new TermColor(11));
res['syntax-groups']['Folded'] = SyntaxGroup.FromColor('Folded', new TermColor(4), new TermColor(248));
res['syntax-groups']['FoldColumn'] = SyntaxGroup.FromColor('FoldColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['DiffAdd'] = SyntaxGroup.FromColor('DiffAdd', new TermColor(-1), new TermColor(81));
res['syntax-groups']['DiffChange'] = SyntaxGroup.FromColor('DiffChange', new TermColor(-1), new TermColor(225));
res['syntax-groups']['DiffDelete'] = SyntaxGroup.FromColor('DiffDelete', new TermColor(12), new TermColor(159));
res['syntax-groups']['DiffText'] = SyntaxGroup.FromColor('DiffText', new TermColor(-1), new TermColor(9));
res['syntax-groups']['SignColumn'] = SyntaxGroup.FromColor('SignColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['Conceal'] = SyntaxGroup.FromColor('Conceal', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['SpellBad'] = SyntaxGroup.FromColor('SpellBad', new TermColor(-1), new TermColor(224));
res['syntax-groups']['SpellCap'] = SyntaxGroup.FromColor('SpellCap', new TermColor(-1), new TermColor(81));
res['syntax-groups']['SpellRare'] = SyntaxGroup.FromColor('SpellRare', new TermColor(-1), new TermColor(225));
res['syntax-groups']['SpellLocal'] = SyntaxGroup.FromColor('SpellLocal', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Pmenu'] = SyntaxGroup.FromColor('Pmenu', new TermColor(0), new TermColor(225));
res['syntax-groups']['PmenuSel'] = SyntaxGroup.FromColor('PmenuSel', new TermColor(0), new TermColor(7));
res['syntax-groups']['PmenuSbar'] = SyntaxGroup.FromColor('PmenuSbar', new TermColor(-1), new TermColor(248));
res['syntax-groups']['PmenuThumb'] = SyntaxGroup.FromColor('PmenuThumb', new TermColor(-1), new TermColor(0));
res['syntax-groups']['TabLine'] = SyntaxGroup.FromColor('TabLine', new TermColor(0), new TermColor(7));
res['syntax-groups']['TabLineSel'] = SyntaxGroup.FromColor('TabLineSel', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['TabLineFill'] = SyntaxGroup.FromColor('TabLineFill', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['CursorColumn'] = SyntaxGroup.FromColor('CursorColumn', new TermColor(-1), new TermColor(7));
res['syntax-groups']['CursorLine'] = SyntaxGroup.FromColor('CursorLine', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ColorColumn'] = SyntaxGroup.FromColor('ColorColumn', new TermColor(-1), new TermColor(224));
res['syntax-groups']['MatchParen'] = SyntaxGroup.FromColor('MatchParen', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Underlined'] = SyntaxGroup.FromColor('Underlined', new TermColor(5), new TermColor(-1));
res['syntax-groups']['Ignore'] = SyntaxGroup.FromColor('Ignore', new TermColor(15), new TermColor(-1));
res['syntax-groups']['lispAtomBarSymbol'] = SyntaxGroup.FromLink('lispAtomBarSymbol', 'Special');
res['syntax-groups']['lispAtomList'] = SyntaxGroup.FromColor('lispAtomList', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispAtomNmbr0'] = SyntaxGroup.FromColor('lispAtomNmbr0', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispComment'] = SyntaxGroup.FromLink('lispComment', 'Comment');
res['syntax-groups']['lispDecl'] = SyntaxGroup.FromLink('lispDecl', 'Statement');
res['syntax-groups']['lispFunc'] = SyntaxGroup.FromLink('lispFunc', 'Statement');
res['syntax-groups']['lispLeadWhite'] = SyntaxGroup.FromColor('lispLeadWhite', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispAtom'] = SyntaxGroup.FromLink('lispAtom', 'Identifier');
res['syntax-groups']['lispAtomMark'] = SyntaxGroup.FromLink('lispAtomMark', 'lispMark');
res['syntax-groups']['lispBQList'] = SyntaxGroup.FromColor('lispBQList', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispBarSymbol'] = SyntaxGroup.FromLink('lispBarSymbol', 'Special');
res['syntax-groups']['lispConcat'] = SyntaxGroup.FromLink('lispConcat', 'Statement');
res['syntax-groups']['lispKey'] = SyntaxGroup.FromLink('lispKey', 'Type');
res['syntax-groups']['lispList'] = SyntaxGroup.FromColor('lispList', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispNumber'] = SyntaxGroup.FromLink('lispNumber', 'Number');
res['syntax-groups']['lispEscapeSpecial'] = SyntaxGroup.FromLink('lispEscapeSpecial', 'Type');
res['syntax-groups']['lispSymbol'] = SyntaxGroup.FromColor('lispSymbol', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispVar'] = SyntaxGroup.FromLink('lispVar', 'Statement');
res['syntax-groups']['lispString'] = SyntaxGroup.FromLink('lispString', 'String');
res['syntax-groups']['lispParen1'] = SyntaxGroup.FromColor('lispParen1', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispParen2'] = SyntaxGroup.FromColor('lispParen2', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispParen3'] = SyntaxGroup.FromColor('lispParen3', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispParen4'] = SyntaxGroup.FromColor('lispParen4', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispParen5'] = SyntaxGroup.FromColor('lispParen5', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispParen6'] = SyntaxGroup.FromColor('lispParen6', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispParen7'] = SyntaxGroup.FromColor('lispParen7', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispParen8'] = SyntaxGroup.FromColor('lispParen8', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispParen9'] = SyntaxGroup.FromColor('lispParen9', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispParen0'] = SyntaxGroup.FromColor('lispParen0', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['lispAtomNmbr'] = SyntaxGroup.FromLink('lispAtomNmbr', 'lispNumber');
res['syntax-groups']['lispInStringString'] = SyntaxGroup.FromLink('lispInStringString', 'lispString');
res['syntax-groups']['lispParenError'] = SyntaxGroup.FromLink('lispParenError', 'Error');
res['syntax-groups']['lispTodo'] = SyntaxGroup.FromLink('lispTodo', 'Todo');
res['syntax-groups']['lispCommentRegion'] = SyntaxGroup.FromLink('lispCommentRegion', 'lispComment');
res['syntax-groups']['lispMark'] = SyntaxGroup.FromLink('lispMark', 'Delimiter');
return res;
} ())
;
res['snippets'] = [];
res['snippets'].push({
  'title': 'Find Missing Perm',
  'terminal-contents': '(</v><vlisp-func>defparameter</vlisp-func><vlisp-list> </vlisp-list><vlisp-escape-special>*permutations*</vlisp-escape-special><v-normal>                                                    </v-normal>\n<vlisp-lead-white>  </vlisp-lead-white><vlisp-atom-mark>&apos;</vlisp-atom-mark><v>(</v><vlisp-string>&quot;ABCD&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;CABD&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;ACDB&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;DACB&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;BCDA&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;ACBD&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;ADCB&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;CDAB&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;DABC&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;BCAD&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;CADB&quot;</vlisp-string>\n<vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;CDBA&quot;</vlisp-string><v-normal>                                                                         </v-normal>\n<vlisp-lead-white>    </vlisp-lead-white><vlisp-string>&quot;CBAD&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;ABDC&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;ADBC&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;BDCA&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;DCBA&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;BACD&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;BADC&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;BDAC&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;CBDA&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;DBCA&quot;</vlisp-string><vlisp-atom-list> </vlisp-atom-list><vlisp-string>&quot;DCAB&quot;</vlisp-string>\n))</v><v-normal>                                                                              </v-normal>\n<v-normal>                                                                                </v-normal>\n(</v><vlisp-decl>defun</vlisp-decl><vlisp-list> </vlisp-list><vlisp-symbol>missing-perm</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-symbol>perms</vlisp-symbol><v>)</v><v-normal>                                                     </v-normal>\n<vlisp-lead-white>  </vlisp-lead-white><v>(</v><vlisp-func>let*</vlisp-func><vlisp-list> </vlisp-list><v>((</v><vlisp-symbol>letters</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-func>loop</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>for</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>i</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>across</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-func>car</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>perms</vlisp-symbol><v>)</v><vlisp-list> </vlisp-list><vlisp-symbol>collecting</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>i</vlisp-symbol><v>))</v><v-normal>                 </v-normal>\n<vlisp-lead-white>         </vlisp-lead-white><v>(</v><vlisp-symbol>l</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-func>/</vlisp-func><vlisp-list> </vlisp-list><v>(</v><vlisp-func>1+</vlisp-func><vlisp-list> </vlisp-list><v>(</v><vlisp-func>length</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>perms</vlisp-symbol><v>))</v><vlisp-list> </vlisp-list><v>(</v><vlisp-func>length</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>letters</vlisp-symbol><v>rs))))</v><v-normal>                        </v-normal>\n<vlisp-lead-white>    </vlisp-lead-white><v>(</v><vlisp-decl>labels</vlisp-decl><vlisp-list> </vlisp-list><v>((</v><vlisp-symbol>enum</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-symbol>n</vlisp-symbol><v>)</v><vlisp-list> </vlisp-list><v>(</v><vlisp-func>loop</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>for</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>i</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>below</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>n</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>collecting</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>i</vlisp-symbol><v>))</v><v-normal>                       </v-normal>\n<vlisp-lead-white>             </vlisp-lead-white><v>(</v><vlisp-symbol>least-occurs</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-symbol>pos</vlisp-symbol><v>)</v><v-normal>                                                </v-normal>\n<vlisp-lead-white>               </vlisp-lead-white><v>(</v><vlisp-decl>let</vlisp-decl><vlisp-list> </vlisp-list><v>((</v><vlisp-symbol>occurs</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-func>loop</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>for</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>i</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>in</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>perms</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>collecting</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-func>aref</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>i</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>pos</vlisp-symbol><v>))))</v><v-normal>    </v-normal>\n<vlisp-lead-white>                 </vlisp-lead-white><v>(</v><vlisp-func>cdr</vlisp-func><vlisp-list> </vlisp-list><v>(</v><vlisp-func>assoc</vlisp-func><vlisp-list> </vlisp-list><v>(</v><vlisp-func>1-</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>l</vlisp-symbol><v>)</v><vlisp-list> </vlisp-list><v>(</v><vlisp-func>mapcar</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>#</vlisp-symbol><vlisp-atom-mark>&apos;</vlisp-atom-mark><v>(</v><vlisp-func>lambda</vlisp-func><vlisp-atom-list> </vlisp-atom-list><v>(</v><vlisp-atom-list>letter</vlisp-atom-list><v>)</v><v-normal>                  </v-normal>\n<vlisp-lead-white>                                                </vlisp-lead-white><v>(</v><vlisp-func>cons</vlisp-func><vlisp-atom-list> </vlisp-atom-list><v>(</v><vlisp-func>count</vlisp-func><vlisp-atom-list> letter occurs</vlisp-atom-list><v>)</v><vlisp-atom-list> lett</vlisp-atom-list>\n<vlisp-atom-list>er</vlisp-atom-list><v>))</v><v-normal>                                                                            </v-normal>\n<vlisp-lead-white>                                            </vlisp-lead-white><vlisp-symbol>letters</vlisp-symbol><v>))))))</v><v-normal>                       </v-normal>\n<vlisp-lead-white>      </vlisp-lead-white><v>(</v><vlisp-func>concatenate</vlisp-func><vlisp-list> </vlisp-list><vlisp-atom-mark>&apos;</vlisp-atom-mark><vlisp-atom>string</vlisp-atom><vlisp-list> </vlisp-list><v>(</v><vlisp-func>mapcar</vlisp-func><vlisp-list> </vlisp-list><vlisp-escape-special>#&apos;least-occurs</vlisp-escape-special><vlisp-list> </vlisp-list><v>(</v><vlisp-symbol>enum</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-func>length</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>letters</vlisp-symbol><v>)))))))</v><v-normal>  </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
res['snippets'].push({
  'title': 'File Input/Output',
  'terminal-contents': '(</v><vlisp-func>defconstant</vlisp-func><vlisp-list> </vlisp-list><vlisp-escape-special>+buffer-size+</vlisp-escape-special><vlisp-list> </vlisp-list><v>(</v><vlisp-func>expt</vlisp-func><vlisp-list> </vlisp-list><vlisp-number>2</vlisp-number><vlisp-list> </vlisp-list><vlisp-number>16</vlisp-number><v>))</v><v-normal>                                         </v-normal>\n<v-normal>                                                                                </v-normal>\n(</v><vlisp-func>with-open-file</vlisp-func><vlisp-list> </vlisp-list><v>(</v><vlisp-symbol>in</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>#p</vlisp-symbol><vlisp-string>&quot;input.txt&quot;</vlisp-string><vlisp-list> </vlisp-list><vlisp-key>:direction</vlisp-key><vlisp-list> </vlisp-list><vlisp-key>:input</vlisp-key><v-normal>                             </v-normal>\n<vlisp-lead-white>                                </vlisp-lead-white><vlisp-key>:element-type</vlisp-key><vlisp-list> </vlisp-list><vlisp-atom-mark>&apos;</vlisp-atom-mark><v>(</v><vlisp-func>unsigned-byte</vlisp-func><vlisp-atom-list> 8</vlisp-atom-list><v>))</v><v-normal>               </v-normal>\n<vlisp-lead-white>  </vlisp-lead-white><v>(</v><vlisp-func>with-open-file</vlisp-func><vlisp-list> </vlisp-list><v>(</v><vlisp-symbol>out</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>#p</vlisp-symbol><vlisp-string>&quot;output.txt&quot;</vlisp-string><vlisp-list> </vlisp-list><v-normal>                                          </v-normal>\n<vlisp-lead-white>                   </vlisp-lead-white><vlisp-key>:direction</vlisp-key><vlisp-list> </vlisp-list><vlisp-key>:output</vlisp-key><v-normal>                                           </v-normal>\n<vlisp-lead-white>                   </vlisp-lead-white><vlisp-key>:element-type</vlisp-key><vlisp-list> </vlisp-list><v>(</v><vlisp-func>stream-element-type</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>in</vlisp-symbol><v>))</v><v-normal>                      </v-normal>\n<vlisp-lead-white>    </vlisp-lead-white><v>(</v><vlisp-func>loop</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>with</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>buffer</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-func>=</vlisp-func><vlisp-list> </vlisp-list><v>(</v><vlisp-func>make-array</vlisp-func><vlisp-list> </vlisp-list><vlisp-escape-special>+buffer-size+</vlisp-escape-special><v-normal>                               </v-normal>\n<vlisp-lead-white>                                    </vlisp-lead-white><vlisp-key>:element-type</vlisp-key><vlisp-list> </vlisp-list><v>(</v><vlisp-func>stream-element-type</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>in</vlisp-symbol><v>))</v><v-normal>     </v-normal>\n<vlisp-lead-white>          </vlisp-lead-white><vlisp-symbol>for</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>size</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-func>=</vlisp-func><vlisp-list> </vlisp-list><v>(</v><vlisp-func>read-sequence</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>buffer</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>in</vlisp-symbol><v>)</v><v-normal>                                  </v-normal>\n<vlisp-lead-white>          </vlisp-lead-white><vlisp-symbol>while</vlisp-symbol><vlisp-list> </vlisp-list><v>(</v><vlisp-func>plusp</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>size</vlisp-symbol><v>)</v><v-normal>                                                    </v-normal>\n<vlisp-lead-white>          </vlisp-lead-white><vlisp-func>do</vlisp-func><vlisp-list> </vlisp-list><v>(</v><vlisp-func>write-sequence</vlisp-func><vlisp-list> </vlisp-list><vlisp-symbol>buffer</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-symbol>out</vlisp-symbol><vlisp-list> </vlisp-list><vlisp-key>:end</vlisp-key><vlisp-list> </vlisp-list><vlisp-symbol>size</vlisp-symbol><v>))))</v><v-normal>                           </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
return res;
}())