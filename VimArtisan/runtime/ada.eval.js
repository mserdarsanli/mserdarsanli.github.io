(function() {
var res = {};
res['lang-syntax'] = (function() {
var res = {};
res['lang'] = 'Rules for Lang: ada';
res['syntax-groups'] = {};
res['syntax-groups']['SpecialKey'] = SyntaxGroup.FromColor('SpecialKey', new TermColor(4), new TermColor(-1));
res['syntax-groups']['NonText'] = SyntaxGroup.FromColor('NonText', new TermColor(12), new TermColor(-1));
res['syntax-groups']['Directory'] = SyntaxGroup.FromColor('Directory', new TermColor(4), new TermColor(-1));
res['syntax-groups']['IncSearch'] = SyntaxGroup.FromColor('IncSearch', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ModeMsg'] = SyntaxGroup.FromColor('ModeMsg', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['LineNr'] = SyntaxGroup.FromColor('LineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['CursorLineNr'] = SyntaxGroup.FromColor('CursorLineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['StatusLineNC'] = SyntaxGroup.FromColor('StatusLineNC', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['VertSplit'] = SyntaxGroup.FromColor('VertSplit', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['Title'] = SyntaxGroup.FromColor('Title', new TermColor(5), new TermColor(-1));
res['syntax-groups']['VisualNOS'] = SyntaxGroup.FromColor('VisualNOS', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['WildMenu'] = SyntaxGroup.FromColor('WildMenu', new TermColor(0), new TermColor(11));
res['syntax-groups']['Folded'] = SyntaxGroup.FromColor('Folded', new TermColor(4), new TermColor(248));
res['syntax-groups']['FoldColumn'] = SyntaxGroup.FromColor('FoldColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['DiffAdd'] = SyntaxGroup.FromColor('DiffAdd', new TermColor(-1), new TermColor(81));
res['syntax-groups']['DiffChange'] = SyntaxGroup.FromColor('DiffChange', new TermColor(-1), new TermColor(225));
res['syntax-groups']['DiffDelete'] = SyntaxGroup.FromColor('DiffDelete', new TermColor(12), new TermColor(159));
res['syntax-groups']['DiffText'] = SyntaxGroup.FromColor('DiffText', new TermColor(-1), new TermColor(9));
res['syntax-groups']['SignColumn'] = SyntaxGroup.FromColor('SignColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['Conceal'] = SyntaxGroup.FromColor('Conceal', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['SpellBad'] = SyntaxGroup.FromColor('SpellBad', new TermColor(-1), new TermColor(224));
res['syntax-groups']['SpellCap'] = SyntaxGroup.FromColor('SpellCap', new TermColor(-1), new TermColor(81));
res['syntax-groups']['SpellRare'] = SyntaxGroup.FromColor('SpellRare', new TermColor(-1), new TermColor(225));
res['syntax-groups']['SpellLocal'] = SyntaxGroup.FromColor('SpellLocal', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Pmenu'] = SyntaxGroup.FromColor('Pmenu', new TermColor(0), new TermColor(225));
res['syntax-groups']['PmenuSel'] = SyntaxGroup.FromColor('PmenuSel', new TermColor(0), new TermColor(7));
res['syntax-groups']['PmenuSbar'] = SyntaxGroup.FromColor('PmenuSbar', new TermColor(-1), new TermColor(248));
res['syntax-groups']['PmenuThumb'] = SyntaxGroup.FromColor('PmenuThumb', new TermColor(-1), new TermColor(0));
res['syntax-groups']['TabLine'] = SyntaxGroup.FromColor('TabLine', new TermColor(0), new TermColor(7));
res['syntax-groups']['TabLineSel'] = SyntaxGroup.FromColor('TabLineSel', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['TabLineFill'] = SyntaxGroup.FromColor('TabLineFill', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['CursorColumn'] = SyntaxGroup.FromColor('CursorColumn', new TermColor(-1), new TermColor(7));
res['syntax-groups']['CursorLine'] = SyntaxGroup.FromColor('CursorLine', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ColorColumn'] = SyntaxGroup.FromColor('ColorColumn', new TermColor(-1), new TermColor(224));
res['syntax-groups']['MatchParen'] = SyntaxGroup.FromColor('MatchParen', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Underlined'] = SyntaxGroup.FromColor('Underlined', new TermColor(5), new TermColor(-1));
res['syntax-groups']['Ignore'] = SyntaxGroup.FromColor('Ignore', new TermColor(15), new TermColor(-1));
res['syntax-groups']['adaException'] = SyntaxGroup.FromLink('adaException', 'Exception');
res['syntax-groups']['adaAttribute'] = SyntaxGroup.FromLink('adaAttribute', 'Tag');
res['syntax-groups']['adaLabel'] = SyntaxGroup.FromLink('adaLabel', 'Label');
res['syntax-groups']['adaOperator'] = SyntaxGroup.FromLink('adaOperator', 'Operator');
res['syntax-groups']['adaSpecial'] = SyntaxGroup.FromLink('adaSpecial', 'Special');
res['syntax-groups']['adaAssignment'] = SyntaxGroup.FromLink('adaAssignment', 'Special');
res['syntax-groups']['adaNumber'] = SyntaxGroup.FromLink('adaNumber', 'Number');
res['syntax-groups']['adaSign'] = SyntaxGroup.FromLink('adaSign', 'Number');
res['syntax-groups']['adaBoolean'] = SyntaxGroup.FromLink('adaBoolean', 'Boolean');
res['syntax-groups']['adaError'] = SyntaxGroup.FromLink('adaError', 'Error');
res['syntax-groups']['adaEnd'] = SyntaxGroup.FromLink('adaEnd', 'Keyword');
res['syntax-groups']['adaPreproc'] = SyntaxGroup.FromLink('adaPreproc', 'PreProc');
res['syntax-groups']['adaRepeat'] = SyntaxGroup.FromLink('adaRepeat', 'Repeat');
res['syntax-groups']['adaStatement'] = SyntaxGroup.FromLink('adaStatement', 'Statement');
res['syntax-groups']['adaRecord'] = SyntaxGroup.FromColor('adaRecord', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['adaStructure'] = SyntaxGroup.FromLink('adaStructure', 'Structure');
res['syntax-groups']['adaKeyword'] = SyntaxGroup.FromLink('adaKeyword', 'Keyword');
res['syntax-groups']['adaStorageClass'] = SyntaxGroup.FromLink('adaStorageClass', 'StorageClass');
res['syntax-groups']['adaTypedef'] = SyntaxGroup.FromLink('adaTypedef', 'Typedef');
res['syntax-groups']['adaConditional'] = SyntaxGroup.FromLink('adaConditional', 'Conditional');
res['syntax-groups']['adaBegin'] = SyntaxGroup.FromLink('adaBegin', 'Keyword');
res['syntax-groups']['adaFunction'] = SyntaxGroup.FromColor('adaFunction', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['adaProcedure'] = SyntaxGroup.FromColor('adaProcedure', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['adaPackage'] = SyntaxGroup.FromColor('adaPackage', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['adaInc'] = SyntaxGroup.FromLink('adaInc', 'Include');
res['syntax-groups']['adaBeginWith'] = SyntaxGroup.FromColor('adaBeginWith', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['adaSemiWith'] = SyntaxGroup.FromColor('adaSemiWith', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['NONE'] = SyntaxGroup.FromColor('NONE', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['adaString'] = SyntaxGroup.FromLink('adaString', 'String');
res['syntax-groups']['adaCharacter'] = SyntaxGroup.FromLink('adaCharacter', 'Character');
res['syntax-groups']['adaTodo'] = SyntaxGroup.FromLink('adaTodo', 'Todo');
res['syntax-groups']['adaLineError'] = SyntaxGroup.FromLink('adaLineError', 'Error');
res['syntax-groups']['adaComment'] = SyntaxGroup.FromLink('adaComment', 'Comment');
res['syntax-groups']['adaType'] = SyntaxGroup.FromLink('adaType', 'Type');
res['syntax-groups']['adaSpaceError'] = SyntaxGroup.FromLink('adaSpaceError', 'Error');
res['syntax-groups']['adaBuiltinType'] = SyntaxGroup.FromLink('adaBuiltinType', 'Type');
return res;
} ())
;
res['snippets'] = [];
res['snippets'].push({
  'title': 'Find Missing Perm',
  'terminal-contents': '<vada-inc>with</vada-inc><v-normal> Ada</v-normal><vada-special>.</vada-special><v-normal>Text_IO</v-normal><vada-special>;</vada-special><v-normal>                                                               </v-normal>\n<vada-begin>procedure</vada-begin><v-normal> Missing_Permutations </v-normal><vada-keyword>is</vada-keyword><v-normal>                                               </v-normal>\n<v-normal>   </v-normal><vada-typedef>subtype</vada-typedef><v-normal> Permutation_Character </v-normal><vada-keyword>is</vada-keyword><v-normal> Character </v-normal><vada-storage-class>range</vada-storage-class><v-normal> </v-normal><vada-character>&apos;A&apos;</vada-character><v-normal> </v-normal><vada-special>..</vada-special><v-normal> </v-normal><vada-character>&apos;D&apos;</vada-character><vada-special>;</vada-special><v-normal>                 </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>   Character_Count </v-normal><vada-special>:</vada-special><v-normal> </v-normal><vada-storage-class>constant</vada-storage-class><v-normal> </v-normal><vada-assignment>:=</vada-assignment><v-normal>                                                </v-normal>\n<v-normal>      </v-normal><vada-number>1</vada-number><v-normal> </v-normal><vada-operator>+</vada-operator><v-normal> Permutation_Character</v-normal><vada-attribute>&apos;Pos</vada-attribute><v-normal> </v-normal><vada-special>(</vada-special><v-normal>Permutation_Character</v-normal><vada-attribute>&apos;Last</vada-attribute><vada-special>)</vada-special><v-normal>                </v-normal>\n<v-normal>        </v-normal><vada-operator>-</vada-operator><v-normal> Permutation_Character</v-normal><vada-attribute>&apos;Pos</vada-attribute><v-normal> </v-normal><vada-special>(</vada-special><v-normal>Permutation_Character</v-normal><vada-attribute>&apos;First</vada-attribute><vada-special>);</vada-special><v-normal>              </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>   </v-normal><vada-typedef>type</vada-typedef><v-normal> Permutation_String </v-normal><vada-keyword>is</vada-keyword><v-normal>                                                   </v-normal>\n<v-normal>     </v-normal><vada-storage-class>array</vada-storage-class><v-normal> </v-normal><vada-special>(</vada-special><vada-number>1</vada-number><v-normal> </v-normal><vada-special>..</vada-special><v-normal> Character_Count</v-normal><vada-special>)</vada-special><v-normal> </v-normal><vada-storage-class>of</vada-storage-class><v-normal> Permutation_Character</v-normal><vada-special>;</vada-special><v-normal>                     </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>   </v-normal><vada-begin>procedure</vada-begin><v-normal> Put </v-normal><vada-special>(</vada-special><v-normal>Item </v-normal><vada-special>:</vada-special><v-normal> Permutation_String</v-normal><vada-special>)</vada-special><v-normal> </v-normal><vada-keyword>is</vada-keyword><v-normal>                                 </v-normal>\n<v-normal>   </v-normal><vada-begin>begin</vada-begin><v-normal>                                                                        </v-normal>\n<v-normal>      </v-normal><vada-repeat>for</vada-repeat><v-normal>for</v-normal><vada-keyword>in</vada-keyword><v-normal> </v-normal><v>in</v><v-normal> I</v-normal><vada-attribute>&apos;Range</vada-attribute><v>n</v><vada-repeat>loop</vada-repeat><v>oop</v><v-normal>                                               </v-normal>\n<v-normal>         Ada</v-normal><vada-special>.</vada-special><v-normal>Text_IO</v-normal><vada-special>.</vada-special><v-normal>Put </v-normal><vada-special>(</vada-special><v-normal>Item </v-normal><vada-special>(</vada-special><v-normal>I</v-normal><vada-special>));</vada-special><v-normal>                                            </v-normal>\n<v-normal>      </v-normal><vada-repeat>end loop</vada-repeat><vada-special>;</vada-special><v-normal>                                                                 </v-normal>\n<v-normal>   </v-normal><vada-end>end</vada-end><v-normal> Put</v-normal><vada-special>;</vada-special><v-normal>                                                                     </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>   Given_Permutations </v-normal><vada-special>:</vada-special><v-normal> </v-normal><vada-storage-class>array</vada-storage-class><v-normal> </v-normal><vada-special>(</vada-special><v-normal>Positive </v-normal><vada-storage-class>range</vada-storage-class><v-normal> </v-normal><vada-operator>&lt;&gt;</vada-operator><vada-special>)</vada-special><v-normal> </v-normal><vada-storage-class>of</vada-storage-class><v-normal> Permutation_String </v-normal><vada-assignment>:=</vada-assignment><v-normal>      </v-normal>\n<v-normal>     </v-normal><vada-special>(</vada-special><vada-string>&quot;ABCD&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;CABD&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;ACDB&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;DACB&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;BCDA&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;ACBD&quot;</vada-string><vada-special>,</vada-special><v-normal>                           </v-normal>\n<v-normal>      </v-normal><vada-string>&quot;ADCB&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;CDAB&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;DABC&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;BCAD&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;CADB&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;CDBA&quot;</vada-string><vada-special>,</vada-special><v-normal>                           </v-normal>\n<v-normal>      </v-normal><vada-string>&quot;CBAD&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;ABDC&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;ADBC&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;BDCA&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;DCBA&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;BACD&quot;</vada-string><vada-special>,</vada-special><v-normal>                           </v-normal>\n<v-normal>      </v-normal><vada-string>&quot;BADC&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;BDAC&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;CBDA&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;DBCA&quot;</vada-string><vada-special>,</vada-special><v-normal> </v-normal><vada-string>&quot;DCAB&quot;</vada-string><vada-special>);</vada-special><v-normal>                                  </v-normal>\n<v-normal>                                                                                </v-normal>\n'
});
res['snippets'].push({
  'title': 'File Input/Output',
  'terminal-contents': '<vada-inc>with</vada-inc><v-normal> Ada</v-normal><vada-special>.</vada-special><v-normal>Text_IO</v-normal><vada-special>;</vada-special><v-normal> </v-normal><vada-keyword>use</vada-keyword><v-normal> Ada</v-normal><vada-special>.</vada-special><v-normal>Text_IO</v-normal><vada-special>;</vada-special><v-normal>                                              </v-normal>\n<v-normal>                                                                                </v-normal>\n<vada-begin>procedure</vada-begin><v-normal> Read_And_Write_File_Line_By_Line </v-normal><vada-keyword>is</vada-keyword><v-normal>                                   </v-normal>\n<v-normal>   Input</v-normal><vada-special>,</vada-special><v-normal> Output </v-normal><vada-special>:</vada-special><v-normal> File_Type</v-normal><vada-special>;</vada-special><v-normal>                                                   </v-normal>\n<vada-begin>begin</vada-begin><v-normal>                                                                           </v-normal>\n<v-normal>   Open </v-normal><vada-special>(</vada-special><v-normal>File </v-normal><vada-operator>=&gt;</vada-operator><v-normal> Input</v-normal><vada-special>,</vada-special><v-normal>                                                         </v-normal>\n<v-normal>         Mode </v-normal><vada-operator>=&gt;</vada-operator><v-normal> In_File</v-normal><vada-special>,</vada-special><v-normal>                                                       </v-normal>\n<v-normal>         Name </v-normal><vada-operator>=&gt;</vada-operator><v-normal> </v-normal><vada-string>&quot;input.txt&quot;</vada-string><vada-special>);</vada-special><v-normal>                                                  </v-normal>\n<v-normal>   Create </v-normal><vada-special>(</vada-special><v-normal>File </v-normal><vada-operator>=&gt;</vada-operator><v-normal> Output</v-normal><vada-special>,</vada-special><v-normal>                                                      </v-normal>\n<v-normal>           Mode </v-normal><vada-operator>=&gt;</vada-operator><v-normal> Out_File</v-normal><vada-special>,</vada-special><v-normal>                                                    </v-normal>\n<v-normal>           Name </v-normal><vada-operator>=&gt;</vada-operator><v-normal> </v-normal><vada-string>&quot;output.txt&quot;</vada-string><vada-special>);</vada-special><v-normal>                                               </v-normal>\n<v-normal>   </v-normal><vada-repeat>loop</vada-repeat><v-normal>                                                                         </v-normal>\n<v-normal>      </v-normal><vada-begin>declare</vada-begin><v-normal>                                                                   </v-normal>\n<v-normal>         Line </v-normal><vada-special>:</vada-special><v-normal> String </v-normal><vada-assignment>:=</vada-assignment><v-normal> Get_Line </v-normal><vada-special>(</vada-special><v-normal>Input</v-normal><vada-special>);</vada-special><v-normal>                                     </v-normal>\n<v-normal>      </v-normal><vada-begin>begin</vada-begin><v-normal>                                                                     </v-normal>\n<v-normal>         </v-normal><vada-comment>-- You can process the contents of Line here.</vada-comment><v-normal>                          </v-normal>\n<v-normal>         Put_Line </v-normal><vada-special>(</vada-special><v-normal>Output</v-normal><vada-special>,</vada-special><v-normal> Line</v-normal><vada-special>);</vada-special><v-normal>                                               </v-normal>\n<v-normal>      </v-normal><vada-end>end</vada-end><vada-special>;</vada-special><v-normal>                                                                      </v-normal>\n<v-normal>   </v-normal><vada-repeat>end loop</vada-repeat><vada-special>;</vada-special><v-normal>                                                                    </v-normal>\n<v-normal>   Close </v-normal><vada-special>(</vada-special><v-normal>Input</v-normal><vada-special>);</vada-special><v-normal>                                                               </v-normal>\n<v-normal>   Close </v-normal><vada-special>(</vada-special><v-normal>Output</v-normal><vada-special>);</vada-special><v-normal>                                                              </v-normal>\n<vada-keyword>exception</vada-keyword><v-normal>                                                                       </v-normal>\n<v-normal>   </v-normal><vada-conditional>when</vada-conditional><v-normal> </v-normal><vada-exception>End_Error</vada-exception><v-normal> </v-normal><vada-operator>=&gt;</vada-operator><v-normal>                                                            </v-normal>\n<v-normal>                                                                                </v-normal>\n'
});
return res;
}())