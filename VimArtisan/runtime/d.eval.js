(function() {
var res = {};
res['lang-syntax'] = (function() {
var res = {};
res['lang'] = 'Rules for Lang: d';
res['syntax-groups'] = {};
res['syntax-groups']['SpecialKey'] = SyntaxGroup.FromColor('SpecialKey', new TermColor(4), new TermColor(-1));
res['syntax-groups']['NonText'] = SyntaxGroup.FromColor('NonText', new TermColor(12), new TermColor(-1));
res['syntax-groups']['Directory'] = SyntaxGroup.FromColor('Directory', new TermColor(4), new TermColor(-1));
res['syntax-groups']['IncSearch'] = SyntaxGroup.FromColor('IncSearch', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ModeMsg'] = SyntaxGroup.FromColor('ModeMsg', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['LineNr'] = SyntaxGroup.FromColor('LineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['CursorLineNr'] = SyntaxGroup.FromColor('CursorLineNr', new TermColor(130), new TermColor(-1));
res['syntax-groups']['StatusLineNC'] = SyntaxGroup.FromColor('StatusLineNC', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['VertSplit'] = SyntaxGroup.FromColor('VertSplit', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['Title'] = SyntaxGroup.FromColor('Title', new TermColor(5), new TermColor(-1));
res['syntax-groups']['VisualNOS'] = SyntaxGroup.FromColor('VisualNOS', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['WildMenu'] = SyntaxGroup.FromColor('WildMenu', new TermColor(0), new TermColor(11));
res['syntax-groups']['Folded'] = SyntaxGroup.FromColor('Folded', new TermColor(4), new TermColor(248));
res['syntax-groups']['FoldColumn'] = SyntaxGroup.FromColor('FoldColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['DiffAdd'] = SyntaxGroup.FromColor('DiffAdd', new TermColor(-1), new TermColor(81));
res['syntax-groups']['DiffChange'] = SyntaxGroup.FromColor('DiffChange', new TermColor(-1), new TermColor(225));
res['syntax-groups']['DiffDelete'] = SyntaxGroup.FromColor('DiffDelete', new TermColor(12), new TermColor(159));
res['syntax-groups']['DiffText'] = SyntaxGroup.FromColor('DiffText', new TermColor(-1), new TermColor(9));
res['syntax-groups']['SignColumn'] = SyntaxGroup.FromColor('SignColumn', new TermColor(4), new TermColor(248));
res['syntax-groups']['Conceal'] = SyntaxGroup.FromColor('Conceal', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['SpellBad'] = SyntaxGroup.FromColor('SpellBad', new TermColor(-1), new TermColor(224));
res['syntax-groups']['SpellCap'] = SyntaxGroup.FromColor('SpellCap', new TermColor(-1), new TermColor(81));
res['syntax-groups']['SpellRare'] = SyntaxGroup.FromColor('SpellRare', new TermColor(-1), new TermColor(225));
res['syntax-groups']['SpellLocal'] = SyntaxGroup.FromColor('SpellLocal', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Pmenu'] = SyntaxGroup.FromColor('Pmenu', new TermColor(0), new TermColor(225));
res['syntax-groups']['PmenuSel'] = SyntaxGroup.FromColor('PmenuSel', new TermColor(0), new TermColor(7));
res['syntax-groups']['PmenuSbar'] = SyntaxGroup.FromColor('PmenuSbar', new TermColor(-1), new TermColor(248));
res['syntax-groups']['PmenuThumb'] = SyntaxGroup.FromColor('PmenuThumb', new TermColor(-1), new TermColor(0));
res['syntax-groups']['TabLine'] = SyntaxGroup.FromColor('TabLine', new TermColor(0), new TermColor(7));
res['syntax-groups']['TabLineSel'] = SyntaxGroup.FromColor('TabLineSel', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['TabLineFill'] = SyntaxGroup.FromColor('TabLineFill', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['CursorColumn'] = SyntaxGroup.FromColor('CursorColumn', new TermColor(-1), new TermColor(7));
res['syntax-groups']['CursorLine'] = SyntaxGroup.FromColor('CursorLine', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['ColorColumn'] = SyntaxGroup.FromColor('ColorColumn', new TermColor(-1), new TermColor(224));
res['syntax-groups']['MatchParen'] = SyntaxGroup.FromColor('MatchParen', new TermColor(-1), new TermColor(14));
res['syntax-groups']['Underlined'] = SyntaxGroup.FromColor('Underlined', new TermColor(5), new TermColor(-1));
res['syntax-groups']['Ignore'] = SyntaxGroup.FromColor('Ignore', new TermColor(15), new TermColor(-1));
res['syntax-groups']['dExternal'] = SyntaxGroup.FromLink('dExternal', 'Include');
res['syntax-groups']['dAssert'] = SyntaxGroup.FromLink('dAssert', 'Statement');
res['syntax-groups']['dConditional'] = SyntaxGroup.FromLink('dConditional', 'Conditional');
res['syntax-groups']['dBranch'] = SyntaxGroup.FromLink('dBranch', 'Conditional');
res['syntax-groups']['dRepeat'] = SyntaxGroup.FromLink('dRepeat', 'Repeat');
res['syntax-groups']['dBoolean'] = SyntaxGroup.FromLink('dBoolean', 'Boolean');
res['syntax-groups']['dConstant'] = SyntaxGroup.FromLink('dConstant', 'Constant');
res['syntax-groups']['dTypedef'] = SyntaxGroup.FromLink('dTypedef', 'Typedef');
res['syntax-groups']['dStructure'] = SyntaxGroup.FromLink('dStructure', 'Structure');
res['syntax-groups']['dEnum'] = SyntaxGroup.FromLink('dEnum', 'Structure');
res['syntax-groups']['dOperator'] = SyntaxGroup.FromLink('dOperator', 'Operator');
res['syntax-groups']['dOpOverload'] = SyntaxGroup.FromLink('dOpOverload', 'Identifier');
res['syntax-groups']['dType'] = SyntaxGroup.FromLink('dType', 'Type');
res['syntax-groups']['dDebug'] = SyntaxGroup.FromLink('dDebug', 'Debug');
res['syntax-groups']['dExceptions'] = SyntaxGroup.FromLink('dExceptions', 'Exception');
res['syntax-groups']['dScopeDecl'] = SyntaxGroup.FromLink('dScopeDecl', 'dStorageClass');
res['syntax-groups']['dStatement'] = SyntaxGroup.FromLink('dStatement', 'Statement');
res['syntax-groups']['dStorageClass'] = SyntaxGroup.FromLink('dStorageClass', 'StorageClass');
res['syntax-groups']['dIdentifier'] = SyntaxGroup.FromLink('dIdentifier', 'Identifier');
res['syntax-groups']['dScopeIdentifier'] = SyntaxGroup.FromLink('dScopeIdentifier', 'Identifier');
res['syntax-groups']['dTraitsIdentifier'] = SyntaxGroup.FromLink('dTraitsIdentifier', 'Identifier');
res['syntax-groups']['dPragmaIdentifier'] = SyntaxGroup.FromLink('dPragmaIdentifier', 'Identifier');
res['syntax-groups']['dExternIdentifier'] = SyntaxGroup.FromLink('dExternIdentifier', 'Identifier');
res['syntax-groups']['dAttribute'] = SyntaxGroup.FromLink('dAttribute', 'StorageClass');
res['syntax-groups']['dVersionIdentifier'] = SyntaxGroup.FromLink('dVersionIdentifier', 'Identifier');
res['syntax-groups']['dNestedComment'] = SyntaxGroup.FromLink('dNestedComment', 'Comment');
res['syntax-groups']['dBlockComment'] = SyntaxGroup.FromLink('dBlockComment', 'Comment');
res['syntax-groups']['dLineComment'] = SyntaxGroup.FromLink('dLineComment', 'Comment');
res['syntax-groups']['dSharpBang'] = SyntaxGroup.FromLink('dSharpBang', 'PreProc');
res['syntax-groups']['dAnnotation'] = SyntaxGroup.FromLink('dAnnotation', 'PreProc');
res['syntax-groups']['dVersion'] = SyntaxGroup.FromLink('dVersion', 'dStatement');
res['syntax-groups']['dPragma'] = SyntaxGroup.FromLink('dPragma', 'PreProc');
res['syntax-groups']['dExtern'] = SyntaxGroup.FromLink('dExtern', 'dExternal');
res['syntax-groups']['dImport'] = SyntaxGroup.FromColor('dImport', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['dParenString'] = SyntaxGroup.FromLink('dParenString', 'dNestString');
res['syntax-groups']['dBrackString'] = SyntaxGroup.FromLink('dBrackString', 'dNestString');
res['syntax-groups']['dAngleString'] = SyntaxGroup.FromLink('dAngleString', 'dNestString');
res['syntax-groups']['dCurlyString'] = SyntaxGroup.FromLink('dCurlyString', 'dNestString');
res['syntax-groups']['dTokenString'] = SyntaxGroup.FromColor('dTokenString', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['dDelimString'] = SyntaxGroup.FromLink('dDelimString', 'String');
res['syntax-groups']['dHereString'] = SyntaxGroup.FromLink('dHereString', 'String');
res['syntax-groups']['paramlist'] = SyntaxGroup.FromColor('paramlist', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['dLabel'] = SyntaxGroup.FromLink('dLabel', 'Label');
res['syntax-groups']['dUserLabel'] = SyntaxGroup.FromLink('dUserLabel', 'Label');
res['syntax-groups']['dCommentError'] = SyntaxGroup.FromLink('dCommentError', 'Error');
res['syntax-groups']['dNestedCommentError'] = SyntaxGroup.FromLink('dNestedCommentError', 'Error');
res['syntax-groups']['dTodo'] = SyntaxGroup.FromLink('dTodo', 'Todo');
res['syntax-groups']['dCommentStar'] = SyntaxGroup.FromLink('dCommentStar', 'dBlockComment');
res['syntax-groups']['dCommentPlus'] = SyntaxGroup.FromLink('dCommentPlus', 'dNestedComment');
res['syntax-groups']['dUnicode'] = SyntaxGroup.FromLink('dUnicode', 'Special');
res['syntax-groups']['dEscSequence'] = SyntaxGroup.FromLink('dEscSequence', 'SpecialChar');
res['syntax-groups']['dBlockCommentString'] = SyntaxGroup.FromLink('dBlockCommentString', 'dString');
res['syntax-groups']['dCommentStartError'] = SyntaxGroup.FromLink('dCommentStartError', 'Error');
res['syntax-groups']['dNestedCommentString'] = SyntaxGroup.FromLink('dNestedCommentString', 'dString');
res['syntax-groups']['dLineCommentString'] = SyntaxGroup.FromLink('dLineCommentString', 'dBlockCommentString');
res['syntax-groups']['dString'] = SyntaxGroup.FromLink('dString', 'String');
res['syntax-groups']['dSpecialCharError'] = SyntaxGroup.FromLink('dSpecialCharError', 'Error');
res['syntax-groups']['dCharacter'] = SyntaxGroup.FromLink('dCharacter', 'Character');
res['syntax-groups']['dRawString'] = SyntaxGroup.FromLink('dRawString', 'String');
res['syntax-groups']['dHexString'] = SyntaxGroup.FromLink('dHexString', 'String');
res['syntax-groups']['dNestParenString'] = SyntaxGroup.FromColor('dNestParenString', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['dNestBrackString'] = SyntaxGroup.FromColor('dNestBrackString', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['dNestAngleString'] = SyntaxGroup.FromColor('dNestAngleString', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['dNestCurlyString'] = SyntaxGroup.FromColor('dNestCurlyString', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['dNestString'] = SyntaxGroup.FromLink('dNestString', 'String');
res['syntax-groups']['dNestTokenString'] = SyntaxGroup.FromColor('dNestTokenString', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['dTokenStringBrack'] = SyntaxGroup.FromLink('dTokenStringBrack', 'String');
res['syntax-groups']['dDec'] = SyntaxGroup.FromLink('dDec', 'Number');
res['syntax-groups']['dHex'] = SyntaxGroup.FromLink('dHex', 'Number');
res['syntax-groups']['dOctal'] = SyntaxGroup.FromLink('dOctal', 'Number');
res['syntax-groups']['dOctalError'] = SyntaxGroup.FromLink('dOctalError', 'Error');
res['syntax-groups']['dBinary'] = SyntaxGroup.FromLink('dBinary', 'Number');
res['syntax-groups']['dFloat'] = SyntaxGroup.FromLink('dFloat', 'Float');
res['syntax-groups']['dHexFloat'] = SyntaxGroup.FromLink('dHexFloat', 'Float');
res['syntax-groups']['dBlock'] = SyntaxGroup.FromColor('dBlock', new TermColor(-1), new TermColor(-1));
res['syntax-groups']['dAsmStatement'] = SyntaxGroup.FromLink('dAsmStatement', 'dStatement');
res['syntax-groups']['dAsmOpCode'] = SyntaxGroup.FromLink('dAsmOpCode', 'Identifier');
res['syntax-groups']['dAsmBody'] = SyntaxGroup.FromLink('dAsmBody', 'dUnicode');
return res;
} ())
;
res['snippets'] = [];
res['snippets'].push({
  'title': 'Find Missing Perm',
  'terminal-contents': '<vd-type>void</vd-type><v-normal> main</v-normal><vparamlist>()</vparamlist><v-normal> {                                                                   </v-normal>\n<v-normal>    </v-normal><vd-external>import</vd-external><vd-import> std.stdio, std.string, std.algorithm, std.range, std.conv;</vd-import><v-normal>           </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>    </v-normal><vd-storage-class>immutable</vd-storage-class><v-normal> perms = </v-normal><vd-string>&quot;ABCD CABD ACDB DACB BCDA ACBD ADCB CDAB DABC</vd-string><v-normal>             </v-normal>\n<vd-string>                       BCAD CADB CDBA CBAD ABDC ADBC BDCA DCBA BACD</vd-string><v-normal>             </v-normal>\n<vd-string>                       BADC BDAC CBDA DBCA DCAB&quot;</vd-string><v-normal>.split;                         </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>    </v-normal><vd-line-comment>// Version 1: test all permutations.</vd-line-comment><v-normal>                                        </v-normal>\n<v-normal>    </v-normal><vd-storage-class>immutable</vd-storage-class><v-normal> permsSet = perms                                                  </v-normal>\n<v-normal>                         .map!representation                                    </v-normal>\n<v-normal>                         .zip</v-normal><vparamlist>(</vparamlist><vd-boolean>true</vd-boolean><vparamlist>.repeat)</vparamlist><v-normal>                                      </v-normal>\n<v-normal>                         .assocArray;                                           </v-normal>\n<v-normal>    </v-normal><vd-storage-class>auto</vd-storage-class><v-normal> perm = perms[</v-normal><vd-dec>0</vd-dec><v-normal>].dup.representation;                                    </v-normal>\n<v-normal>    </v-normal><vd-repeat>do</vd-repeat><v-normal> {                                                                        </v-normal>\n<v-normal>        </v-normal><vd-conditional>if</vd-conditional><v-normal> </v-normal><vparamlist>(perm !</vparamlist><vd-storage-class>in</vd-storage-class><vparamlist> permsSet)</vparamlist><v-normal>                                                  </v-normal>\n<v-normal>            writeln</v-normal><vparamlist>(perm.map!(c =&gt; </vparamlist><vd-type>char</vd-type><vparamlist>(c)</vparamlist><v-normal>));                                   </v-normal>\n<v-normal>    } </v-normal><vd-repeat>while</vd-repeat><v-normal> </v-normal><vparamlist>(perm.nextPermutation)</vparamlist><v-normal>;                                             </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>    </v-normal><vd-line-comment>// Version 2: xor all the ASCII values, the uneven one</vd-line-comment><v-normal>                      </v-normal>\n<v-normal>    </v-normal><vd-line-comment>// gets flushed out. Based on Perl 6 (via Go).</vd-line-comment><v-normal>                              </v-normal>\n<v-normal>    </v-normal><vd-enum>enum</vd-enum><v-normal> len = </v-normal><vd-dec>4</vd-dec><v-normal>;                                                               </v-normal>\n<v-normal>    </v-normal><vd-type>char</vd-type><v-normal>[len] b = </v-normal><vd-dec>0</vd-dec><v-normal>;                                                            </v-normal>\n<v-normal>    </v-normal><vd-repeat>foreach</vd-repeat><v-normal> </v-normal><vparamlist>(</vparamlist><vd-storage-class>immutable</vd-storage-class><vparamlist> p; perms)</vparamlist><v-normal>                                                </v-normal>\n<v-normal>                                                                                </v-normal>\n'
});
res['snippets'].push({
  'title': 'File Input/Output',
  'terminal-contents': '<vd-external>import</vd-external><vd-import> std.stdio;</vd-import><v-normal>                                                               </v-normal>\n<v-normal>                                                                                </v-normal>\n<vd-type>int</vd-type><v-normal> main</v-normal><vparamlist>()</vparamlist><v-normal> {                                                                    </v-normal>\n<v-normal>    </v-normal><vd-storage-class>auto</vd-storage-class><v-normal> from = File</v-normal><vparamlist>(</vparamlist><vd-string>&quot;input.txt&quot;</vd-string><vparamlist>, </vparamlist><vd-string>&quot;rb&quot;</vd-string><vparamlist>)</vparamlist><v-normal>;                                        </v-normal>\n<v-normal>    </v-normal><vd-statement>scope</vd-statement><v-normal>(</v-normal><vd-scope-identifier>exit</vd-scope-identifier><v-normal>) from.close</v-normal><vparamlist>()</vparamlist><v-normal>;                                                   </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>    </v-normal><vd-storage-class>auto</vd-storage-class><v-normal> to = File</v-normal><vparamlist>(</vparamlist><vd-string>&quot;output.txt&quot;</vd-string><vparamlist>, </vparamlist><vd-string>&quot;wb&quot;</vd-string><vparamlist>)</vparamlist><v-normal>;                                         </v-normal>\n<v-normal>    </v-normal><vd-statement>scope</vd-statement><v-normal>(</v-normal><vd-scope-identifier>exit</vd-scope-identifier><v-normal>) to.close</v-normal><vparamlist>()</vparamlist><v-normal>;                                                     </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>    </v-normal><vd-repeat>foreach</vd-repeat><vparamlist>(buffer; from.byChunk(</vparamlist><vd-operator>new</vd-operator><vparamlist> </vparamlist><vd-type>ubyte</vd-type><vparamlist>[</vparamlist><vd-dec>4096</vd-dec><vparamlist>*</vparamlist><vd-dec>1024</vd-dec><vparamlist>])</vparamlist><v-normal>) {                       </v-normal>\n<v-normal>        to.rawWrite</v-normal><vparamlist>(buffer)</vparamlist><v-normal>;                                                    </v-normal>\n<v-normal>    }                                                                           </v-normal>\n<v-normal>                                                                                </v-normal>\n<v-normal>    </v-normal><vd-statement>return</vd-statement><v-normal> </v-normal><vd-dec>0</vd-dec><v-normal>;                                                                   </v-normal>\n<v-normal>}                                                                               </v-normal>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-non-text>~                                                                               </v-non-text>\n<v-normal>                                                                                </v-normal>\n'
});
return res;
}())